!function(){"use strict";angular.module("app",["ngRoute","mobile-angular-ui","angular-loading-bar","app.main","app.home","ngNotify","app.user","app.necesidad","mobile-angular-ui.gestures"]).run(["$transform",function(e){window.$transform=e}]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"scripts/home/home.html",reloadOnSearch:!1}).when("/",{templateUrl:"scripts/home/scroll.html",reloadOnSearch:!1,controller:"HomeCtrl",controllerAs:"HomeCtrl"}).when("/necesidad/:id",{templateUrl:"scripts/necesidad/detalle.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/necesidad/:id/editar",{templateUrl:"scripts/necesidad/editar.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/categoria/:categoria",{templateUrl:"scripts/necesidad/categoria.html",reloadOnSearch:!1,controller:"CategoriaCtrl",controllerAs:"CategoriaCtrl"}).when("/perfil",{templateUrl:"scripts/users/config.html",reloadOnSearch:!1,controller:"ConfigCtrl",controllerAs:"ConfigCtrl"}).when("/usuario/:id",{templateUrl:"scripts/users/profile.html",reloadOnSearch:!1,controller:"UserCtrl",controllerAs:"UserCtrl"}).when("/contacto",{templateUrl:"scripts/shared/contacto.html"}).when("/privacidad",{templateUrl:"scripts/shared/privacidad.html"}).otherwise({redirectTo:"/"})}])}(),function(){"use strict";angular.module("app.home",[]).controller("HomeCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad.categoria",[]).controller("CategoriaCtrl",["Necesidad","$routeParams",function(e,r){var t=this;e.categoria(r.categoria).success(function(e){t.necesidades=e.necesidades,t.categoria=e.categoria}).error(function(e){console.error(e)})}])}(),function(){"use strict";angular.module("app.comentario.service",[]).factory("Comentario",["$http",function(e){return{"delete":function(r){return e["delete"]("/api/comentarios/"+r)},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades/"+r.necesidadId+"/comentarios"})},update:function(r){return e({data:r,method:"PUT",url:"/api/comentarios/"+r.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.detalle",[]).controller("NecesidadDetalleCtrl",["Necesidad","ngNotify","$routeParams","$window","Comentario","$scope",function(e,r,t,n,o,a){var i=this;i.necesidad={},i.ComentarioForm={},t.id&&e.show(t.id).success(function(e){i.necesidad=e}).error(function(e){r.set(e,"error")}),i.save=function(){e.update(i.necesidad).success(function(e){r.set(e,"success")}).error(function(e){r.set(e,"error")})},i.comentar=function(){i.ComentarioForm.necesidadId=i.necesidad.id,i.ComentarioForm.userId=i.necesidad.userId,i.Comentario.createdAt=new Date,o.create(i.ComentarioForm).success(function(e){r.set(e,"success"),i.necesidad.comentarios.push(i.ComentarioForm)}).error(function(e){r.set(e,"error")})},i["delete"]=function(){var t=confirm("Realmente deseas eliminar esta publicaciÃ³n?");t&&e["delete"](i.necesidad.id).success(function(e){r.set(e,"success"),n.location="#/"}).error(function(e){r.set(e,"error")})},a.upload=function(n){console.log("Subiendo archivo");var o=new FormData;n[0]&&(o.append("file",n[0]),e.upload(o,t.id).success(function(e){r.set(e,"success"),console.log(e)}).error(function(e){console.log(e),r.set(e,"error")}))}}])}(),function(){"use strict";angular.module("app.necesidad",["app.necesidad.service","app.necesidad.nueva","app.necesidad.detalle","app.necesidad.categoria","app.comentario.service"]).controller("NecesidadesCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad.service",[]).factory("Necesidad",["$http",function(e){return{load:function(r){return e.get("/api/necesidades")},show:function(r){return e.get("/api/necesidades/"+r)},categoria:function(r){return e.get("/api/categorias/"+r)},"delete":function(r){return e["delete"]("/api/necesidades/"+r)},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades"})},upload:function(r,t){return e.post("/api/necesidades/"+t+"/upload",r,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},update:function(r){return e({data:r,method:"PUT",url:"/api/necesidades/"+r.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.nueva",[]).controller("NuevaNecesidadCtrl",["Necesidad","ngNotify","$window",function(e,r,t){var n=this;n.NecesidadForm={},n.create=function(){e.create(n.NecesidadForm).success(function(e){r.set("Necesidad agregada correctamente :)","success"),t.location="#/necesidad/"+e+"/editar"}).error(function(e){r.set(e,"error")})}}])}(),angular.module("app.directives",[]).directive("money",function(){function e(e,t,n,o){function a(e){var r=Math.pow(10,l);return Math.round(e*r)/r}function i(e){return parseFloat(e).toFixed(l)}function s(e){return o.$isEmpty(e)?"":""+e}var c,u=parseFloat(n.min||0),l=parseFloat(n.precision||2);o.$parsers.push(function(e){angular.isUndefined(e)&&(e=""),0===e.indexOf(".")&&(e="0"+e),0===e.indexOf("-")&&(u>=0?(e=null,o.$setViewValue(""),o.$render()):"-"===e&&(e=""));var t=o.$isEmpty(e);return t||r.test(e)?c=""===e?null:t?e:parseFloat(e):(o.$setViewValue(s(c)),o.$render()),o.$setValidity("number",!0),c}),o.$formatters.push(s);var d=function(e){return!o.$isEmpty(e)&&u>e?void o.$setValidity("min",!1):(o.$setValidity("min",!0),e)};if(o.$parsers.push(d),o.$formatters.push(d),n.max){var p=parseFloat(n.max),f=function(e){return!o.$isEmpty(e)&&e>p?void o.$setValidity("max",!1):(o.$setValidity("max",!0),e)};o.$parsers.push(f),o.$formatters.push(f)}l>-1&&(o.$parsers.push(function(e){return e?a(e):e}),o.$formatters.push(function(e){return e?i(e):e})),t.bind("blur",function(){var e=o.$modelValue;e&&(o.$viewValue=i(e),o.$render())})}var r=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;return{restrict:"A",require:"ngModel",link:e}}).directive("numbersOnly",function(){return{restrict:"A",require:"ngModel",link:function(e,r,t,n){n.$parsers.push(function(e){if(void 0===e)return"";var r=e.replace(/[^0-9+.]/g,"");return r!==e&&(n.$setViewValue(r),n.$render()),r})}}}),angular.module("app.filters",[]).filter("dinero",["$filter","$locale",function(e,r){var t=e("currency"),n=r.NUMBER_FORMATS;return function(e,r,o){0===r&&(r=-1);var a=t(e,o),i=a.indexOf(n.DECIMAL_SEP)+1,s="";return i<a.indexOf(n.CURRENCY_SYM)&&(s=" "+n.CURRENCY_SYM),a.substring(0,i+r)+s}}]),function(){"use strict";angular.module("app.main",["app.directives","app.filters"]).controller("MainController",["$rootScope","$scope","User",function(e,r,t){var n=this;t.me().success(function(e){n.user=e}).error(function(e){console.log(e)}),r.userAgent=navigator.userAgent,e.$on("$routeChangeStart",function(){e.loading=!0}),e.$on("$routeChangeSuccess",function(){e.loading=!1}),r.bottomReached=function(){},r.notices=[];for(var o=0;10>o;o++)r.notices.push({icon:"envelope",message:"Notice "+(o+1)});r.deleteNotice=function(e){var t=r.notices.indexOf(e);t>-1&&r.notices.splice(t,1)}}])}(),function(){"use strict";angular.module("app.user.config",[]).controller("ConfigCtrl",["ngNotify","User",function(e,r){var t=this;t.user={},console.log("Cargando"),r.me().success(function(e){t.user=e}).error(function(r){e.set(r,"error")}),t.save=function(){r.update(t.user).success(function(r){e.set(r,"success")}).error(function(r){e.set(r,"error")})}}])}(),function(){"use strict";angular.module("app.user",["app.user.service","app.user.config"]).controller("UserCtrl",["ngNotify","User","$routeParams",function(e,r,t){var n=this;console.log("Cargando"),r.show(t.id).success(function(e){n.user=e,console.log("no"),console.log(e)}).error(function(r){e.set(r,"error")})}])}(),function(){"use strict";angular.module("app.user.service",[]).factory("User",["$http",function(e){return{me:function(){return e.get("/api/users/profile")},update:function(r){return e({method:"PUT",data:r,url:"/api/users/profile"})},show:function(r){return e.get("/api/users/"+r)}}}])}();
//# sourceMappingURL=data:application/json;base64,
