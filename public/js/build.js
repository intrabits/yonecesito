!function(){"use strict";angular.module("app",["ngRoute","ngNotify","ui.bootstrap","mobile-angular-ui","angular-loading-bar","mobile-angular-ui.gestures","app.socket","app.necesidad","app.admin","app.home","app.main","app.user"]).run(["$transform",function(e){window.$transform=e}]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"scripts/home/scroll.html",reloadOnSearch:!1,controller:"HomeCtrl",controllerAs:"HomeCtrl"}).when("/busqueda",{template:"<busqueda></busqueda>"}).when("/necesidad/:id",{templateUrl:"scripts/necesidad/views/detalle.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/necesidad/:id/editar",{templateUrl:"scripts/necesidad/views/editar.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/categoria/:categoria",{templateUrl:"scripts/necesidad/views/categoria.html",reloadOnSearch:!1,controller:"CategoriaCtrl",controllerAs:"CategoriaCtrl"}).when("/perfil",{templateUrl:"scripts/users/config.html",reloadOnSearch:!1,controller:"ConfigCtrl",controllerAs:"ConfigCtrl"}).when("/usuario/:id",{template:"<user-profile></user-profile>"}).when("/contacto",{templateUrl:"scripts/shared/contacto.html"}).when("/privacidad",{templateUrl:"scripts/shared/privacidad.html"}).when("/admin",{template:"<admin-dashboard></admin-dashboard>"}).when("/admin/usuarios",{template:"<users-list></users-list>"}).when("/admin/necesidades",{template:"<necesidades-list></necesidades-list>"}).when("/admin/comentarios",{template:"<comentarios-list></comentarios-list>"}).otherwise({redirectTo:"/"})}])}(),function(){"use strict";angular.module("app.home",[]).controller("HomeCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.admin",["app.admin.users","app.admin.necesidades","app.admin.comentarios","app.admin.dashboard","app.admin.service"])}(),function(){"use strict";angular.module("app.admin.service",[]).factory("Admin",["$http",function(e){return{dash:function(){return e.get("/api/admin/dash")},user:function(r){return e.get("/api/admin/users/"+r)},users:function(){return e.get("api/admin/users")},necesidad:function(r){return e.get("/api/admin/necesidades/"+r)},necesidades:function(){return e.get("api/admin/necesidades")}}}])}(),function(){"use strict";angular.module("app.admin.comentarios",[]).directive("comentariosList",function(){return{restrict:"E",templateUrl:"scripts/admin/comentarios.html",controller:"AdminComentariosCtrl",controllerAs:"ctrl"}}).controller("AdminComentariosCtrl",["Comentario","ngNotify","$route",function(e,r,t){var n=this;e.all().success(function(e){n.comentarios=e}).error(function(e){r.set(e,"error")}),n["delete"]=function(n){var s=confirm("¿Realmente deseas borrar este comentario?");s&&e["delete"](n).success(function(e){r.set(e,"success"),t.reload()}).error(function(e){r.set(e,"error")})},n.update=function(n){var s=prompt("Remplaza el texto",n.texto);n.texto=s,e.update(n).success(function(e){r.set(e,"success"),t.reload()}).error(function(e){r.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.admin.dashboard",[]).directive("adminDashboard",function(){return{restrict:"E",templateUrl:"scripts/admin/dashboard.html",controller:"AdminDashCtrl",controllerAs:"ctrl"}}).controller("AdminDashCtrl",["Admin","ngNotify",function(e,r){var t=this;e.dash().success(function(e){t.dash=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.admin.necesidades",[]).directive("necesidadesList",function(){return{restrict:"E",templateUrl:"scripts/admin/necesidades.html",controller:"AdminNecesidadesCtrl",controllerAs:"ctrl"}}).controller("AdminNecesidadesCtrl",["Necesidad","ngNotify","$route",function(e,r,t){var n=this;e.load().success(function(e){n.necesidades=e}).error(function(e){r.set(e,"error")}),n["delete"]=function(n){var s=confirm("¿Realmente deseas borrar esta necesidad?");s&&e["delete"](n).success(function(e){r.set(e,"success"),t.reload()}).error(function(e){r.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.admin.users",[]).directive("usersList",function(){return{restrict:"E",templateUrl:"scripts/admin/users.html",controller:"AdminUsersCtrl",controllerAs:"ctrl"}}).controller("AdminUsersCtrl",["User","ngNotify",function(e,r){var t=this;e.all().success(function(e){t.users=e}).error(function(e){r.set(e,"error")})}])}(),angular.module("app.directives",[]).directive("money",function(){function e(e,t,n,s){function i(e){var r=Math.pow(10,d);return Math.round(e*r)/r}function o(e){return parseFloat(e).toFixed(d)}function a(e){return s.$isEmpty(e)?"":""+e}var c,u=parseFloat(n.min||0),d=parseFloat(n.precision||2);s.$parsers.push(function(e){angular.isUndefined(e)&&(e=""),0===e.indexOf(".")&&(e="0"+e),0===e.indexOf("-")&&(u>=0?(e=null,s.$setViewValue(""),s.$render()):"-"===e&&(e=""));var t=s.$isEmpty(e);return t||r.test(e)?c=""===e?null:t?e:parseFloat(e):(s.$setViewValue(a(c)),s.$render()),s.$setValidity("number",!0),c}),s.$formatters.push(a);var l=function(e){return!s.$isEmpty(e)&&u>e?void s.$setValidity("min",!1):(s.$setValidity("min",!0),e)};if(s.$parsers.push(l),s.$formatters.push(l),n.max){var p=parseFloat(n.max),f=function(e){return!s.$isEmpty(e)&&e>p?void s.$setValidity("max",!1):(s.$setValidity("max",!0),e)};s.$parsers.push(f),s.$formatters.push(f)}d>-1&&(s.$parsers.push(function(e){return e?i(e):e}),s.$formatters.push(function(e){return e?o(e):e})),t.bind("blur",function(){var e=s.$modelValue;e&&(s.$viewValue=o(e),s.$render())})}var r=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;return{restrict:"A",require:"ngModel",link:e}}).directive("numbersOnly",function(){return{restrict:"A",require:"ngModel",link:function(e,r,t,n){n.$parsers.push(function(e){if(void 0===e)return"";var r=e.replace(/[^0-9+.]/g,"");return r!==e&&(n.$setViewValue(r),n.$render()),r})}}}),angular.module("app.filters",[]).filter("dinero",["$filter","$locale",function(e,r){var t=e("currency"),n=r.NUMBER_FORMATS;return function(e,r,s){0===r&&(r=-1);var i=t(e,s),o=i.indexOf(n.DECIMAL_SEP)+1,a="";return o<i.indexOf(n.CURRENCY_SYM)&&(a=" "+n.CURRENCY_SYM),i.substring(0,o+r)+a}}]),function(){"use strict";angular.module("app.main",["app.directives","app.filters"]).controller("MainController",["$rootScope","$scope","User","ngNotify","socket",function(e,r,t,n,s){var i=this;i.buscar=function(e){e.length<3||(s.emit("necesidades:buscar",e),s.on("necesidades:resultado",function(e){i.resultados=e}))},t.me().success(function(e){i.user=e,console.log(e),t.show(e.id).success(function(e){i.user.necesidades=e.necesidades})}).error(function(e){console.log(e)}),i.palabrasClave=function(){swal({title:"Suscribirte",text:"Escribe palabras separadas por una coma para recibir notificaciones a tu correo:",type:"input",showCancelButton:!0,closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Ej: gimnasios, estéticas, computación, etc"},function(e){return e?void t.subscribe({words:e}).success(function(e){swal("Suscrito correctamente",e,"success")}).error(function(e){n.set(e,"error")}):!1})},r.userAgent=navigator.userAgent,e.$on("$routeChangeStart",function(){e.loading=!0}),e.$on("$routeChangeSuccess",function(){e.loading=!1}),r.bottomReached=function(){},r.notices=[];for(var o=0;10>o;o++)r.notices.push({icon:"envelope",message:"Notice "+(o+1)});r.deleteNotice=function(e){var t=r.notices.indexOf(e);t>-1&&r.notices.splice(t,1)}}])}(),function(){"use strict";angular.module("app.socket",[]).factory("socket",function(){var e=io();return e})}(),function(){"use strict";angular.module("app.necesidad.busqueda",[]).directive("busqueda",function(){return{restrict:"E",templateUrl:"scripts/necesidad/views/busqueda.html"}})}(),function(){"use strict";angular.module("app.necesidad.categoria",[]).controller("CategoriaCtrl",["Necesidad","$routeParams",function(e,r){var t=this;e.categoria(r.categoria).success(function(e){t.necesidades=e.necesidades,t.categoria=e.categoria}).error(function(e){console.error(e)})}])}(),function(){"use strict";angular.module("app.necesidad.comentario",[]).directive("comentario",function(){return{restrict:"E",templateUrl:"scripts/necesidad/comentario.html",scope:{comentario:"="}}})}(),function(){"use strict";angular.module("app.comentario.service",[]).factory("Comentario",["$http",function(e){return{"delete":function(r){return e["delete"]("/api/comentarios/"+r)},util:function(r){return e.patch("/api/comentarios/"+r)},all:function(){return e.get("/api/comentarios/")},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades/"+r.necesidadId+"/comentarios"})},update:function(r){return e({data:r,method:"PUT",url:"/api/comentarios/"+r.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.detalle",[]).controller("NecesidadDetalleCtrl",["Necesidad","ngNotify","$routeParams","$window","Comentario","$scope",function(e,r,t,n,s,i){var o=this;o.necesidad={},o.Comentario={},t.id&&e.show(t.id).success(function(e){o.necesidad=e}).error(function(e){r.set(e,"error")}),o.save=function(){e.update(o.necesidad).success(function(e){r.set(e,"success")}).error(function(e){r.set(e,"error")})},o.comentar=function(){o.ComentarioForm.necesidadId=o.necesidad.id,s.create(o.ComentarioForm).success(function(e){r.set(e,"success"),o.Comentario.createdAt=new Date,o.necesidad.comentarios.push(o.Comentario),o.Comentario={}}).error(function(e){r.set(e,"error")})},o["delete"]=function(){var t=confirm("Realmente deseas eliminar esta publicación?");t&&e["delete"](o.necesidad.id).success(function(e){r.set(e,"success"),n.location="#/"}).error(function(e){r.set(e,"error")})},o.util=function(e){s.util(e.id).success(function(t){e.util=!0,r.set(t,"success")}).error(function(e){r.set(e,"error")})},i.upload=function(n){console.log("Subiendo archivo");var s=new FormData;n[0]&&(s.append("file",n[0]),e.upload(s,t.id).success(function(e){r.set(e,"success"),console.log(e)}).error(function(e){console.log(e),r.set(e,"error")}))}}])}(),function(){"use strict";angular.module("app.necesidad.item",[]).directive("necesidadItem",function(){return{restrict:"E",templateUrl:"scripts/necesidad/views/item.html",scope:{necesidad:"="}}})}(),function(){"use strict";angular.module("app.necesidad",["app.necesidad.service","app.necesidad.nueva","app.necesidad.item","app.necesidad.detalle","app.necesidad.categoria","app.necesidad.comentario","app.necesidad.busqueda","app.comentario.service"]).controller("NecesidadesCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}]).directive("categoria",function(){return{restrict:"E",templateUrl:"scripts/necesidad/cate.html",scope:{id:"@"}}})}(),function(){"use strict";angular.module("app.necesidad.service",[]).factory("Necesidad",["$http",function(e){return{load:function(r){return e.get("/api/necesidades")},show:function(r){return e.get("/api/necesidades/"+r)},categoria:function(r){return e.get("/api/categorias/"+r)},"delete":function(r){return e["delete"]("/api/necesidades/"+r)},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades"})},upload:function(r,t){return e.post("/api/necesidades/"+t+"/upload",r,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},update:function(r){return e({data:r,method:"PUT",url:"/api/necesidades/"+r.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.nueva",[]).directive("nuevaNecesidad",["Necesidad","ngNotify","$window",function(e,r,t){return{restrict:"E",templateUrl:"scripts/necesidad/nueva.html",scope:{user:"="},controllerAs:"NuevaNecesidadCtrl",bindToController:!0,controller:"NuevaNecesidadCtrl"}}]).controller("NuevaNecesidadCtrl",["Necesidad","ngNotify","$window",function(e,r,t){var n=this;n.NecesidadForm={},n.create=function(){e.create(n.NecesidadForm).success(function(e){r.set("Necesidad agregada correctamente :)","success"),t.location="#/necesidad/"+e+"/editar"}).error(function(e){r.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.user.config",[]).controller("ConfigCtrl",["ngNotify","User","$scope",function(e,r,t){var n=this;n.user={},r.me().success(function(e){n.user=e}).error(function(r){e.set(r,"error")}),n.save=function(){r.update(n.user).success(function(r){e.set(r,"success")}).error(function(r){e.set(r,"error")})},t.upload=function(t){console.log("Subiendo archivo");var s=new FormData;t[0]&&(s.append("file",t[0]),r.upload(s).success(function(r){e.set("Imagen guardada correctamente","success"),n.user.picture=r}).error(function(r){console.log(r),e.set(r,"error")}))}}])}(),function(){"use strict";angular.module("app.user",["app.user.service","app.user.profile","app.user.config"]).controller("UserCtrl",["ngNotify","User","$routeParams",function(e,r,t){var n=this;console.log("Cargando"),r.show(t.id).success(function(e){n.user=e,console.log("no"),console.log(e)}).error(function(r){e.set(r,"error")})}])}(),function(){"use strict";angular.module("app.user.service",[]).factory("User",["$http",function(e){return{me:function(){return e.get("/api/users/profile")},update:function(r){return e({method:"PUT",data:r,url:"/api/users/profile"})},upload:function(r){return e.post("/api/users/upload",r,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},subscribe:function(r){return e({method:"POST",data:r,url:"/api/users/subscribe"})},show:function(r){return e.get("/api/users/"+r)},all:function(){return e.get("api/admin/users")}}}])}(),function(){"use strict";angular.module("app.user.profile",[]).directive("userProfile",function(){return{restrict:"E",templateUrl:"scripts/users/profile.html",controller:"UserCtrl",controllerAs:"ctrl"}}).controller("UserCtrl",["User","ngNotify",function(e,r){var t=this;e.all().success(function(e){t.users=e}).error(function(e){r.set(e,"error")})}])}();
//# sourceMappingURL=data:application/json;base64,
