!function(){"use strict";angular.module("app",["ngRoute","ngNotify","ui.bootstrap","mobile-angular-ui","angular-loading-bar","mobile-angular-ui.gestures","app.socket","app.necesidad","app.admin","app.home","app.main","app.user"]).run(["$transform",function(e){window.$transform=e}]).run(["$rootScope",function(e){e.$on("$routeChangeSuccess",function(e,t,r){})}]).config(["$routeProvider","$locationProvider",function(e,t){e.when("/",{templateUrl:"scripts/home/scroll.html",reloadOnSearch:!1,controller:"HomeCtrl",controllerAs:"HomeCtrl"}).when("/busqueda",{template:"<busqueda></busqueda>"}).when("/necesidad/:id",{templateUrl:"scripts/necesidad/views/detalle.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/necesidad/:id/comentario/:comentarioId",{templateUrl:"scripts/necesidad/views/detalle.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/necesidad/:id/editar",{templateUrl:"scripts/necesidad/views/editar.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/categoria/:categoria",{templateUrl:"scripts/necesidad/views/categoria.html",reloadOnSearch:!1,controller:"CategoriaCtrl",controllerAs:"CategoriaCtrl"}).when("/perfil",{title:"Configuración de la cuenta",templateUrl:"scripts/users/config.html",reloadOnSearch:!1,controller:"ConfigCtrl",controllerAs:"ConfigCtrl"}).when("/usuario/:id",{template:"<user-profile></user-profile>"}).when("/contacto",{templateUrl:"scripts/shared/contacto.html"}).when("/privacidad",{templateUrl:"scripts/shared/privacidad.html"}).when("/admin",{template:"<admin-dashboard></admin-dashboard>"}).when("/admin/usuarios",{template:"<users-list></users-list>"}).when("/admin/necesidades",{template:"<necesidades-list></necesidades-list>"}).when("/admin/comentarios",{template:"<comentarios-list></comentarios-list>"}).otherwise({redirectTo:"/"})}])}(),function(){"use strict";angular.module("app.admin",["app.admin.users","app.admin.necesidades","app.admin.comentarios","app.admin.dashboard","app.admin.service"])}(),function(){"use strict";angular.module("app.admin.service",[]).factory("Admin",["$http",function(e){return{dash:function(){return e.get("/api/admin/dash")},user:function(t){return e.get("/api/admin/users/"+t)},users:function(){return e.get("api/admin/users")},necesidad:function(t){return e.get("/api/admin/necesidades/"+t)},necesidades:function(){return e.get("api/admin/necesidades")}}}])}(),function(){"use strict";angular.module("app.admin.comentarios",[]).directive("comentariosList",function(){return{restrict:"E",templateUrl:"scripts/admin/comentarios.html",controller:"AdminComentariosCtrl",controllerAs:"ctrl"}}).controller("AdminComentariosCtrl",["Comentario","ngNotify","$route",function(e,t,r){var n=this;e.all().success(function(e){n.comentarios=e}).error(function(e){t.set(e,"error")}),n["delete"]=function(n){var o=confirm("¿Realmente deseas borrar este comentario?");o&&e["delete"](n).success(function(e){t.set(e,"success"),r.reload()}).error(function(e){t.set(e,"error")})},n.update=function(n){var o=prompt("Remplaza el texto",n.texto);n.texto=o,e.update(n).success(function(e){t.set(e,"success"),r.reload()}).error(function(e){t.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.admin.dashboard",[]).directive("adminDashboard",function(){return{restrict:"E",templateUrl:"scripts/admin/dashboard.html",controller:"AdminDashCtrl",controllerAs:"ctrl"}}).controller("AdminDashCtrl",["Admin","ngNotify","socket",function(e,t,r){var n=this;n.logs=[],e.dash().success(function(e){n.dash=e}).error(function(e){t.set(e,"error")}),r.on("users:logs",function(e){t.set(e.log,"success"),n.logs.push(e)})}])}(),function(){"use strict";angular.module("app.admin.necesidades",[]).directive("necesidadesList",function(){return{restrict:"E",templateUrl:"scripts/admin/necesidades.html",controller:"AdminNecesidadesCtrl",controllerAs:"ctrl"}}).controller("AdminNecesidadesCtrl",["Necesidad","ngNotify","$route",function(e,t,r){var n=this;e.load().success(function(e){n.necesidades=e}).error(function(e){t.set(e,"error")}),n["delete"]=function(n){var o=confirm("¿Realmente deseas borrar esta necesidad?");o&&e["delete"](n).success(function(e){t.set(e,"success"),r.reload()}).error(function(e){t.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.admin.users",[]).directive("usersList",function(){return{restrict:"E",templateUrl:"scripts/admin/users.html",controller:"AdminUsersCtrl",controllerAs:"ctrl"}}).controller("AdminUsersCtrl",["User","ngNotify",function(e,t){var r=this;e.all().success(function(e){r.users=e}).error(function(e){t.set(e,"error")}),r.ban=function(r){var n="banned"===r.type?"permitir":"bloquear",o=confirm("Realmente quieres "+n+" el acceso a "+r.name+"?");o&&e.ban(r.id).success(function(e){"banned"===r.type?r.type="usuario":r.type="banned",t.set(e,"success")}).error(function(e){t.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.home",[]).controller("HomeCtrl",["Necesidad","ngNotify",function(e,t){var r=this;e.load().success(function(e){r.necesidades=e}).error(function(e){t.set(e,"error")})}])}(),angular.module("app.directives",[]).directive("money",function(){function e(e,r,n,o){function i(e){var t=Math.pow(10,d);return Math.round(e*t)/t}function s(e){return parseFloat(e).toFixed(d)}function a(e){return o.$isEmpty(e)?"":""+e}var c,u=parseFloat(n.min||0),d=parseFloat(n.precision||2);o.$parsers.push(function(e){angular.isUndefined(e)&&(e=""),0===e.indexOf(".")&&(e="0"+e),0===e.indexOf("-")&&(u>=0?(e=null,o.$setViewValue(""),o.$render()):"-"===e&&(e=""));var r=o.$isEmpty(e);return r||t.test(e)?c=""===e?null:r?e:parseFloat(e):(o.$setViewValue(a(c)),o.$render()),o.$setValidity("number",!0),c}),o.$formatters.push(a);var l=function(e){return!o.$isEmpty(e)&&u>e?void o.$setValidity("min",!1):(o.$setValidity("min",!0),e)};if(o.$parsers.push(l),o.$formatters.push(l),n.max){var p=parseFloat(n.max),m=function(e){return!o.$isEmpty(e)&&e>p?void o.$setValidity("max",!1):(o.$setValidity("max",!0),e)};o.$parsers.push(m),o.$formatters.push(m)}d>-1&&(o.$parsers.push(function(e){return e?i(e):e}),o.$formatters.push(function(e){return e?s(e):e})),r.bind("blur",function(){var e=o.$modelValue;e&&(o.$viewValue=s(e),o.$render())})}var t=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;return{restrict:"A",require:"ngModel",link:e}}).directive("numbersOnly",function(){return{restrict:"A",require:"ngModel",link:function(e,t,r,n){n.$parsers.push(function(e){if(void 0===e)return"";var t=e.replace(/[^0-9+.]/g,"");return t!==e&&(n.$setViewValue(t),n.$render()),t})}}}),angular.module("app.filters",[]).filter("dinero",["$filter","$locale",function(e,t){var r=e("currency"),n=t.NUMBER_FORMATS;return function(e,t,o){0===t&&(t=-1);var i=r(e,o),s=i.indexOf(n.DECIMAL_SEP)+1,a="";return s<i.indexOf(n.CURRENCY_SYM)&&(a=" "+n.CURRENCY_SYM),i.substring(0,s+t)+a}}]),function(){"use strict";angular.module("app.main",["app.directives","app.filters"]).controller("MainController",["$rootScope","$scope","User","ngNotify","socket",function(e,t,r,n,o){var i=this;i.buscar=function(e){e.length<1||(o.emit("necesidades:buscar",e),o.on("necesidades:resultado",function(e){i.resultados=e}))},i.login=function(){var e='<a href="/auth/facebook" class="btn btn-primary form-control">Facebook</a>';e+='<a href="/auth/facebook" class="btn btn-info form-control">Twitter</a>',e+='<a href="/auth/facebook" class="btn btn-danger form-control">Google</a>',swal({title:"Iniciar sesión",text:e,html:!0})},r.me().success(function(e){i.user=e,e&&(r.current=e,r.show(e.id).success(function(e){i.user.necesidades=e.necesidades,o.emit("necesidades:notificaciones",r.current),o.on("necesidades:notificaciones",function(e){i.user.unread=e,console.log("Notiicaciones encontradas: ",e.length)})}),setInterval(function(){o.emit("necesidades:notificaciones",r.current)},5e3))}).error(function(e){console.log(e)}),i.palabrasClave=function(){swal({title:"Suscribirte",text:"Escribe palabras separadas por una coma para recibir notificaciones a tu correo:",type:"input",showCancelButton:!0,closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Ej: gimnasios, estéticas, computación, etc"},function(e){return e?void r.subscribe({words:e}).success(function(e){swal("Suscrito correctamente",e,"success")}).error(function(e){n.set(e,"error")}):!1})},t.userAgent=navigator.userAgent,e.$on("$routeChangeStart",function(){e.loading=!0}),e.$on("$routeChangeSuccess",function(){e.loading=!1}),t.bottomReached=function(){},t.notices=[];for(var s=0;10>s;s++)t.notices.push({icon:"envelope",message:"Notice "+(s+1)});t.deleteNotice=function(e){var r=t.notices.indexOf(e);r>-1&&t.notices.splice(r,1)}}])}(),function(){"use strict";angular.module("app.socket",[]).factory("socket",["User",function(e){var t=io();return t.log=function(r){t.emit("users:logs",{log:r,date:new Date,user:e.current})},t}])}(),function(){"use strict";angular.module("app.necesidad.busqueda",[]).directive("busqueda",function(){return{restrict:"E",templateUrl:"scripts/necesidad/views/busqueda.html"}})}(),function(){"use strict";angular.module("app.necesidad.categoria",[]).controller("CategoriaCtrl",["Necesidad","$routeParams",function(e,t){var r=this;e.categoria(t.categoria).success(function(e){r.necesidades=e.necesidades,r.categoria=e.categoria}).error(function(e){console.error(e)})}])}(),function(){"use strict";angular.module("app.necesidad.comentario",[]).directive("comentario",function(){return{restrict:"E",templateUrl:"scripts/necesidad/comentario.html",scope:{comentario:"=",externo:"="}}})}(),function(){"use strict";angular.module("app.comentario.service",[]).factory("Comentario",["$http",function(e){return{"delete":function(t){return e["delete"]("/api/comentarios/"+t)},util:function(t){return e.patch("/api/comentarios/"+t)},show:function(t){return e.get("/api/comentarios/"+t)},all:function(){return e.get("/api/comentarios/")},create:function(t){return e({data:t,method:"POST",url:"/api/necesidades/"+t.necesidadId+"/comentarios"})},update:function(t){return e({data:t,method:"PUT",url:"/api/comentarios/"+t.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.detalle",[]).controller("NecesidadDetalleCtrl",["Necesidad","ngNotify","$routeParams","$window","Comentario","$scope","socket","$rootScope","$location","$anchorScroll",function(e,t,r,n,o,i,s,a,c,u){var d=this;d.necesidad={},d.Comentario={},s.log("Viendo una necesidad"),e.show(r.id).success(function(e){return d.necesidad=e,a.title=e.titulo,r.comentarioId?(c.hash("comentario-"+r.comentarioId),u(),d.comentarioId=r.comentarioId,o.show(r.comentarioId)):void 0}).success(function(e){console.log("coment"),console.log(e)}).error(function(e){t.set(e,"error")}),d.save=function(){s.log("editando una necesidad"),e.update(d.necesidad).success(function(e){t.set(e,"success")}).error(function(e){t.set(e,"error")})},d.comentar=function(){d.ComentarioForm.necesidadId=d.necesidad.id,s.log("comentando una necesidad"),o.create(d.ComentarioForm).success(function(e){t.set("Comentario agregado","success"),console.log(e),d.necesidad.comentarios.push(e),d.ComentarioForm=null,d.ComentarioForm={}}).error(function(e){t.set(e,"error")})},d["delete"]=function(){s.log("eliminando una necesidad");var r=confirm("Realmente deseas eliminar esta publicación?");r&&e["delete"](d.necesidad.id).success(function(e){t.set(e,"success"),n.location="#/"}).error(function(e){t.set(e,"error")})},d.deleteComentario=function(e){var r=confirm("Realmente deseas eliminar este comentario?");r&&o["delete"](e).success(function(r){t.set(r,"success");var n=document.getElementById("comentario-"+e);angular.element(n).remove()}).error(function(e){t.set(e,"error")})},d.util=function(e){s.log('marcando un comentario como "útil"'),o.util(e.id).success(function(r){e.util=!0,t.set(r,"success")}).error(function(e){t.set(e,"error")})},i.upload=function(n){s.log("agregando foto a una necesidad");var o=new FormData;n[0]&&(o.append("file",n[0]),e.upload(o,r.id).success(function(e){t.set(e,"success")}).error(function(e){t.set(e,"error")}))}}])}(),function(){"use strict";angular.module("app.necesidad.item",[]).directive("necesidadItem",function(){return{restrict:"E",templateUrl:"scripts/necesidad/views/item.html",scope:{necesidad:"="}}})}(),function(){"use strict";angular.module("app.necesidad",["app.necesidad.service","app.necesidad.nueva","app.necesidad.item","app.necesidad.detalle","app.necesidad.categoria","app.necesidad.comentario","app.necesidad.busqueda","app.comentario.service"]).controller("NecesidadesCtrl",["Necesidad","ngNotify",function(e,t){var r=this;e.load().success(function(e){r.necesidades=e}).error(function(e){t.set(e,"error")})}]).directive("categoria",function(){return{restrict:"E",templateUrl:"scripts/necesidad/cate.html",scope:{id:"@"}}})}(),function(){"use strict";angular.module("app.necesidad.service",[]).factory("Necesidad",["$http",function(e){return{load:function(t){return e.get("/api/necesidades")},show:function(t){return e.get("/api/necesidades/"+t)},categoria:function(t){return e.get("/api/categorias/"+t)},"delete":function(t){return e["delete"]("/api/necesidades/"+t)},create:function(t){return e({data:t,method:"POST",url:"/api/necesidades"})},upload:function(t,r){return e.post("/api/necesidades/"+r+"/upload",t,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},update:function(t){return e({data:t,method:"PUT",url:"/api/necesidades/"+t.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.nueva",[]).directive("nuevaNecesidad",["Necesidad","ngNotify","$window",function(e,t,r){return{restrict:"E",templateUrl:"scripts/necesidad/nueva.html",scope:{user:"="},controllerAs:"NuevaNecesidadCtrl",bindToController:!0,controller:"NuevaNecesidadCtrl"}}]).controller("NuevaNecesidadCtrl",["Necesidad","ngNotify","$window",function(e,t,r){var n=this;n.NecesidadForm={},n.create=function(){e.create(n.NecesidadForm).success(function(e){t.set("Necesidad agregada correctamente :)","success"),r.location="#/necesidad/"+e+"/editar"}).error(function(e){t.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.user.config",[]).controller("ConfigCtrl",["ngNotify","User","$scope",function(e,t,r){var n=this;n.user={},t.me().success(function(e){n.user=e}).error(function(t){e.set(t,"error")}),n.save=function(){t.update(n.user).success(function(t){e.set(t,"success")}).error(function(t){e.set(t,"error")})},r.upload=function(r){console.log("Subiendo archivo");var o=new FormData;r[0]&&(o.append("file",r[0]),t.upload(o).success(function(t){e.set("Imagen guardada correctamente","success"),n.user.picture=t}).error(function(t){console.log(t),e.set(t,"error")}))}}])}(),function(){"use strict";angular.module("app.user",["app.user.service","app.user.profile","app.user.config"])}(),function(){"use strict";angular.module("app.user.service",[]).factory("User",["$http",function(e){return{current:{},me:function(){return e.get("/api/users/profile")},update:function(t){return e({method:"PUT",data:t,url:"/api/users/profile"})},upload:function(t){return e.post("/api/users/upload",t,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},subscribe:function(t){return e({method:"POST",data:t,url:"/api/users/subscribe"})},show:function(t){return e.get("/api/users/"+t)},ban:function(t){return e["delete"]("/api/users/"+t)},all:function(){return e.get("api/admin/users")}}}])}(),function(){"use strict";angular.module("app.user.profile",[]).directive("userProfile",function(){return{restrict:"E",templateUrl:"scripts/users/profile.html",controller:"UserCtrl",controllerAs:"ctrl"}}).controller("UserCtrl",["User","ngNotify","$routeParams",function(e,t,r){var n=this;e.show(r.id).success(function(e){n.user=e,n.user.aceptadas=_.where(e.comentarios,{util:1}),n.user.reputacion=10*e.necesidades.length+e.comentarios.length+20*n.user.aceptadas.length,n.user.visitas=_.sum(e.necesidades,"visitas")}).error(function(e){t.set(e,"error")})}])}();
//# sourceMappingURL=data:application/json;base64,
