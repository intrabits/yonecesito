!function(){"use strict";angular.module("app",["ngCookies","ngResource","ngSanitize","ngRoute","ngNotify","ngMaterial","ngFileUpload","ui","ui.bootstrap","angular-loading-bar","datatables","app.main","app.archivos","app.document","app.tags","app.users","restangular"]).config(["$routeProvider",function(t){t.when("/",{templateUrl:"scripts/home/home.html",controller:"DashCtrl"}).when("/documento/:id",{templateUrl:"scripts/documents/guardar.html",controller:"SubirCtrl"}).when("/documentos/subir",{templateUrl:"scripts/documents/subir.html",controller:"SubirCtrl"}).when("/documentos",{templateUrl:"scripts/documents/index.html",controller:"DocumentsCtrl",controllerAs:"docs"}).when("/documentos/capturar",{templateUrl:"scripts/documents/capturar.html",controller:"DashCtrl"}).when("/documento/:id",{templateUrl:"scripts/documents/show.html",controller:"DocumentCtrl"}).when("/documento/:id",{templateUrl:"scripts/documents/show.html",controller:"DocumentCtrl"}).when("/documento/:id/edit",{templateUrl:"scripts/documents/edit.html",controller:"DocumentEditCtrl",controllerAs:"DocumentCtrl"}).when("/etiquetas",{templateUrl:"scripts/tags/index.html",controller:"TagsCtrl",controllerAs:"TagsCtrl"}).when("/etiqueta/:tag",{templateUrl:"scripts/tags/tag.html",controller:"TagCtrl",controllerAs:"TagCtrl"}).when("/configuracion",{templateUrl:"scripts/users/index.html",controller:"UserCtrl"}).when("/archivos",{templateUrl:"scripts/archivos/index.html",controller:"ArchivosCtrl"}).otherwise({redirectTo:"/"})}])}(),angular.module("app.archivos",["archivo.model"]).controller("ArchivosCtrl",["$scope","$route","Archivo","$window",function(t,e,o,n){o.all(function(e,o){e?swal("Error",e,"error"):t.archivos=o}),t.saveArchivo=function(){console.log("Guardando"),o.create(t.FormArchivo,function(e,o){e?swal("Error",e,"error"):t.registros.push(t.FormArchivo)})},t.deleteArchivo=function(e){var r=confirm("¿Realmente deseas eliminar este Archivo?");r&&o["delete"](t.Archivo_id,function(t,e){t?swal("Error",t,"error"):n.location="#/Archivos"})}}]),angular.module("archivo.model",["ngRoute"]).factory("Archivo",["$http",function(t){return{create:function(e,o){t({data:e,method:"POST",url:"/api/archivos/"}).success(function(t){o(null,t)}).error(function(t){o(t,null)})},update:function(e,o,n){t({data:o,method:"PUT",url:"/api/seguros/"+e}).success(function(t){n(null,t)}).error(function(t){n(t,null)})},detail:function(e,o){t.get("/api/seguros/"+e).success(function(t){o(null,t)}).error(function(t){o(t)})},"delete":function(e,o){t["delete"]("/api/seguros/"+e).success(function(t){o(null,t)}).error(function(t){o(t)})},all:function(e){t.get("/api/archivos/").success(function(t){e(null,t)}).error(function(t){e(t)})},find:function(e,o){t.get("/api/archivos/?ref="+e).success(function(t){o(null,t)}).error(function(t){o(t)})},departamentos:function(e){t.get("/api/departamentos/").success(function(t){e(null,t)}).error(function(t){e(t)})},ramos:function(e){t.get("/api/ramos/").success(function(t){e(null,t)}).error(function(t){e(t)})}}}]),function(){"use strict";angular.module("app.document",["app.document.service","app.document.detail","app.document.directives","app.document.upload","app.document.search"]).controller("DocumentsCtrl",["$scope","Document",function(t,e){var o=this;e.list().then(function(t){o.documents=t})["catch"](function(t){console.log(t)})}])}(),function(){"use strict";angular.module("app.document.directives",[]).directive("document",function(){return{restrict:"A",require:"ngModel",templateUrl:"scripts/documents/directive.html"}})}(),function(){"use strict";angular.module("app.document.service",["restangular"]).factory("Document",["$http","Restangular",function(t,e){return{list:function(){return e.all("api/documents").getList()},upload:function(e){return t.post("/api/documents/",e,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},show:function(e){return t.get("/api/documents/"+e)},update:function(e){return t({method:"PUT",url:"/api/documents/"+e.id,data:e})},search:function(e){return t({method:"POST",url:"/api/documents/search",data:e})},ocr:function(e){return t.get("/api/documents/"+e+"/ocr")}}}])}(),function(){"use strict";angular.module("app.document.detail",[]).controller("DocumentEditCtrl",["Document","$routeParams","ngNotify",function(t,e,o){var n=this;n.chips=["hola","bartola"],console.log("Editar documento"),t.show(e.id).success(function(o){n.document=o,console.log(o),n.chips=o.tags,n.tags=o.ocr.split(" "),o.ocr.length<1&&(console.log("Procesando (OCR)"),t.ocr(e.id).success(function(t){n.document.ocr=t,n.tags=t.split(" ")}))}).error(function(t){console.log(t),alert(t)}),n.addTag=function(t){_.includes(n.chips,t)||n.chips.push(t)},n.editDocument=function(){console.log("Editando documento"),n.document.tags=n.chips,t.update(n.document).success(function(t){o.set(t,"success")})["catch"](function(t){o.set(t,"error")})}}]).controller("DocumentCtrl",["$scope","Document","$routeParams",function(t,e,o){e.show(o.id).success(function(e){t.document=e}).error(function(t){console.log(t),alert(t)})}])}(),function(){"use strict";angular.module("app.document.search",[]).controller("DocumentSearchCtrl",["Document","$window","ngNotify","$scope",function(t,e,o,n){var r=this;r.string="",r.encontrados=[],r.search=function(){console.log("Buscando documentos (OCR)");var e=r.string.toString();t.search({string:e}).success(function(t){console.log(t),r.encontrados=t,n.encontrados=t,$("#BusquedaOCR").html(""),r.encontrados.map(function(t){console.log("Insertado LI"),$("#BusquedaOCR").append('<li><a href="#/documento/'+t.id+'"> '+t.name+"</a></li>")}),n.toggleRight()}).error(function(t){o.set(t,"error")})},r.searchTag=function(){e.location="#/etiqueta/"+r.string}}])}(),function(){"use strict";angular.module("app.document.upload",[]).controller("SubirCtrl",["$scope","Upload","$mdDialog",function(t,e,o){console.log("Subir archivo"),t.progress=!1,t.upload=function(e){console.log("Subiendo"),t.progress=!0,n(t.files,e)};var n=function(n,r){if(n&&n.length)for(var c=0;c<n.length;c++){console.log("Archivo "+c);var s=n[c];console.log(s),e.upload({url:"/api/documents/",file:n,fileName:"file"}).progress(function(e){t.progress||(t.progress=!0);var o=parseInt(100*e.loaded/e.total);console.log("progress: "+o+"% "+e.config.file.name)}).success(function(e,n,c,s){t.progress=!1,o.show(o.alert().parent(angular.element(document.body)).title("Text Scanned from Mulkiya").content(e).ariaLabel("Alert Dialog").ok("Got it!").targetEvent(r)),console.log("file "+s.file.name+"uploaded. Response: "+e)}).error(function(e){t.progress=!1,o.show(o.alert().parent(angular.element(document.body)).title("Text Scanned from Mulkiya").content(e).ariaLabel("Alert Dialog").ok("Got it!").targetEvent(r))})}}}])}(),angular.module("app.directives",[]).directive("money",function(){function t(t,o,n,r){function c(t){var e=Math.pow(10,l);return Math.round(t*e)/e}function s(t){return parseFloat(t).toFixed(l)}function i(t){return r.$isEmpty(t)?"":""+t}var u,a=parseFloat(n.min||0),l=parseFloat(n.precision||2);r.$parsers.push(function(t){angular.isUndefined(t)&&(t=""),0===t.indexOf(".")&&(t="0"+t),0===t.indexOf("-")&&(a>=0?(t=null,r.$setViewValue(""),r.$render()):"-"===t&&(t=""));var o=r.$isEmpty(t);return o||e.test(t)?u=""===t?null:o?t:parseFloat(t):(r.$setViewValue(i(u)),r.$render()),r.$setValidity("number",!0),u}),r.$formatters.push(i);var d=function(t){return!r.$isEmpty(t)&&a>t?void r.$setValidity("min",!1):(r.$setValidity("min",!0),t)};if(r.$parsers.push(d),r.$formatters.push(d),n.max){var p=parseFloat(n.max),f=function(t){return!r.$isEmpty(t)&&t>p?void r.$setValidity("max",!1):(r.$setValidity("max",!0),t)};r.$parsers.push(f),r.$formatters.push(f)}l>-1&&(r.$parsers.push(function(t){return t?c(t):t}),r.$formatters.push(function(t){return t?s(t):t})),o.bind("blur",function(){var t=r.$modelValue;t&&(r.$viewValue=s(t),r.$render())})}var e=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;return{restrict:"A",require:"ngModel",link:t}}).directive("numbersOnly",function(){return{restrict:"A",require:"ngModel",link:function(t,e,o,n){n.$parsers.push(function(t){if(void 0===t)return"";var e=t.replace(/[^0-9+.]/g,"");return e!=t&&(n.$setViewValue(e),n.$render()),e})}}}),angular.module("app.filters",[]).filter("dinero",["$filter","$locale",function(t,e){var o=t("currency"),n=e.NUMBER_FORMATS;return function(t,e,r){0===e&&(e=-1);var c=o(t,r),s=c.indexOf(n.DECIMAL_SEP)+1,i="";return s<c.indexOf(n.CURRENCY_SYM)&&(i=" "+n.CURRENCY_SYM),c.substring(0,s+e)+i}}]),function(){"use strict";angular.module("app.main",["app.directives","app.filters"]).controller("AppCtrl",["$scope","$http","User","$window","$timeout","$mdSidenav","$mdUtil","$log","Document",function(t,e,o,n,r,c,s,i,u){function a(t){var e=s.debounce(function(){c(t).toggle().then(function(){i.debug("toggle "+t+" is done")})},300);return e}o.one("profile").get().then(function(e){t.user=e})["catch"](function(t){console.log(t.data)}),t.subir=function(e){console.log("Subiendo archivo");var o=new FormData;e[0]?(o.append("file",e[0]),u.upload(o).success(function(t){console.log("Subido correctamente"),console.log(t),n.location="#/documento/"+t+"/edit"}).error(function(t){console.log(t)}),t.demo.isOpen=!1):console.log("No se seleccionó ningún archivo")},t.toggleLeft=a("left"),t.toggleRight=a("right"),t.demo={isOpen:!1,selectedDirection:"up",selectedMode:"md-fling"}}]).controller("DashCtrl",["$scope",function(t){}]).controller("LeftCtrl",["$scope","$timeout","$mdSidenav","$log",function(t,e,o,n){t.close=function(){o("left").close().then(function(){n.debug("close LEFT is done")})}}]).controller("RightCtrl",["$scope","$timeout","$mdSidenav","$log",function(t,e,o,n){t.close=function(){o("right").close().then(function(){n.debug("close RIGHT is done")})}}])}(),function(){"use strict";angular.module("app.tags.tag",[]).controller("TagCtrl",["Tag","ngNotify","$routeParams",function(t,e,o){var n=this;n.tag=o.tag,console.log("Cargando documentos de la etiqueta "+o.tag),t.find(o.tag).success(function(t){n.documents=t}).error(function(t){e.set(t,"error")})}])}(),function(){"use strict";angular.module("app.tags",["app.tags.service","app.tags.tag"]).controller("TagsCtrl",["Tag","ngNotify",function(t,e){var o=this;o.selectTags={},t.list().success(function(t){o.tags=t}).error(function(t){e.set(t,"error")}),o.busarDocumentos=function(){console.log(o.selectTags);var n=[];_.each(o.selectTags,function(t,e){t===!0&&n.push(e)}),console.log(n),t.search(n).success(function(t){o.documents=t,console.log(t.length)}).error(function(t){e.set(t,"error")})}}])}(),function(){"use strict";angular.module("app.tags.service",[]).factory("Tag",["$http",function(t){return{list:function(){return t.get("/api/tags/")},find:function(e){return t.get("/api/tags/"+e)},search:function(e){return t({method:"POST",url:"/api/tags/",data:e})}}}])}(),function(){"use strict";angular.module("app.users",["app.users.service"]).controller("UserCtrl",["$scope","User",function(t,e){e.one("profile").get().then(function(e){t.FormUser=e})["catch"](function(t){alert(t.data)}),t.updateProfile=function(){t.FormUser.put()["catch"](function(t){alert(t.data)})}}])}(),function(){"use strict";angular.module("app.users.service",["restangular"]).factory("User",["Restangular",function(t){return{all:t.all("api/users"),one:function(e){return t.one("api/users",e)}}}])}();
//# sourceMappingURL=data:application/json;base64,