!function(){"use strict";angular.module("app",["ngRoute","mobile-angular-ui","app.main","app.home","ngNotify","app.necesidad","mobile-angular-ui.gestures"]).run(["$transform",function(e){window.$transform=e}]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"scripts/home/home.html",reloadOnSearch:!1}).when("/",{templateUrl:"scripts/home/scroll.html",reloadOnSearch:!1,controller:"HomeCtrl",controllerAs:"HomeCtrl"}).when("/necesidad/:id",{templateUrl:"scripts/necesidad/detalle.html",reloadOnSearch:!1,controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/categoria/:categoria",{templateUrl:"scripts/necesidad/categoria.html",reloadOnSearch:!1,controller:"CategoriaCtrl",controllerAs:"CategoriaCtrl"}).otherwise({redirectTo:"/"})}])}(),function(){"use strict";angular.module("app.home",[]).controller("HomeCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad.categoria",[]).controller("CategoriaCtrl",["Necesidad","$routeParams",function(e,r){var t=this;e.categoria(r.categoria).success(function(e){t.necesidades=e.necesidades,t.categoria=e.categoria}).error(function(e){console.error(e)})}])}(),function(){"use strict";angular.module("app.necesidad.detalle",[]).controller("NecesidadDetalleCtrl",["Necesidad","ngNotify","$routeParams",function(e,r,t){var n=this;t.id&&e.show(t.id).success(function(e){n.necesidad=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad",["app.necesidad.service","app.necesidad.nueva","app.necesidad.detalle","app.necesidad.categoria"]).controller("NecesidadesCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad.service",[]).factory("Necesidad",["$http",function(e){return{load:function(r){return e.get("/api/necesidades")},show:function(r){return e.get("/api/necesidades/"+r)},categoria:function(r){return e.get("/api/categorias/"+r)},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades"})}}}])}(),function(){"use strict";angular.module("app.necesidad.nueva",[]).controller("NuevaNecesidadCtrl",["Necesidad","ngNotify","$window",function(e,r,t){var n=this;n.NecesidadForm={},n.create=function(){e.create(n.NecesidadForm).success(function(e){r.set(e,"success"),t.location="#/necesidad/"+e}).error(function(e){r.set(e,"error")})}}])}(),angular.module("app.directives",[]).directive("money",function(){function e(e,t,n,a){function i(e){var r=Math.pow(10,l);return Math.round(e*r)/r}function o(e){return parseFloat(e).toFixed(l)}function s(e){return a.$isEmpty(e)?"":""+e}var c,u=parseFloat(n.min||0),l=parseFloat(n.precision||2);a.$parsers.push(function(e){angular.isUndefined(e)&&(e=""),0===e.indexOf(".")&&(e="0"+e),0===e.indexOf("-")&&(u>=0?(e=null,a.$setViewValue(""),a.$render()):"-"===e&&(e=""));var t=a.$isEmpty(e);return t||r.test(e)?c=""===e?null:t?e:parseFloat(e):(a.$setViewValue(s(c)),a.$render()),a.$setValidity("number",!0),c}),a.$formatters.push(s);var d=function(e){return!a.$isEmpty(e)&&u>e?void a.$setValidity("min",!1):(a.$setValidity("min",!0),e)};if(a.$parsers.push(d),a.$formatters.push(d),n.max){var p=parseFloat(n.max),f=function(e){return!a.$isEmpty(e)&&e>p?void a.$setValidity("max",!1):(a.$setValidity("max",!0),e)};a.$parsers.push(f),a.$formatters.push(f)}l>-1&&(a.$parsers.push(function(e){return e?i(e):e}),a.$formatters.push(function(e){return e?o(e):e})),t.bind("blur",function(){var e=a.$modelValue;e&&(a.$viewValue=o(e),a.$render())})}var r=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;return{restrict:"A",require:"ngModel",link:e}}).directive("numbersOnly",function(){return{restrict:"A",require:"ngModel",link:function(e,r,t,n){n.$parsers.push(function(e){if(void 0===e)return"";var r=e.replace(/[^0-9+.]/g,"");return r!==e&&(n.$setViewValue(r),n.$render()),r})}}}),angular.module("app.filters",[]).filter("dinero",["$filter","$locale",function(e,r){var t=e("currency"),n=r.NUMBER_FORMATS;return function(e,r,a){0===r&&(r=-1);var i=t(e,a),o=i.indexOf(n.DECIMAL_SEP)+1,s="";return o<i.indexOf(n.CURRENCY_SYM)&&(s=" "+n.CURRENCY_SYM),i.substring(0,o+r)+s}}]),function(){"use strict";angular.module("app.main",["app.directives","app.filters"]).controller("MainController",["$rootScope","$scope",function(e,r){r.userAgent=navigator.userAgent,e.$on("$routeChangeStart",function(){e.loading=!0}),e.$on("$routeChangeSuccess",function(){e.loading=!1}),r.bottomReached=function(){alert("Congrats you scrolled to the end of the list!")},r.notices=[];for(var t=0;10>t;t++)r.notices.push({icon:"envelope",message:"Notice "+(t+1)});r.deleteNotice=function(e){var t=r.notices.indexOf(e);t>-1&&r.notices.splice(t,1)}}])}(),function(){"use strict";angular.module("app.users",["app.users.service"]).controller("UserCtrl",["$scope","User",function(e,r){r.one("profile").get().then(function(r){e.FormUser=r})["catch"](function(e){alert(e.data)}),e.updateProfile=function(){e.FormUser.put()["catch"](function(e){alert(e.data)})}}])}(),function(){"use strict";angular.module("app.users.service",[]).factory("User",["$http",function(e){return{all:Restangular.all("api/users"),one:function(e){return Restangular.one("api/users",e)}}}])}();
//# sourceMappingURL=data:application/json;base64,
