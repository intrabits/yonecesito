!function(){"use strict";angular.module("app",["ngRoute","ngNotify","mobile-angular-ui","angular-loading-bar","app.main","app.home","app.admin","app.user","app.necesidad","mobile-angular-ui.gestures"]).run(["$transform",function(e){window.$transform=e}]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"scripts/home/home.html",reloadOnSearch:!1}).when("/",{templateUrl:"scripts/home/scroll.html",reloadOnSearch:!1,controller:"HomeCtrl",controllerAs:"HomeCtrl"}).when("/necesidad/:id",{templateUrl:"scripts/necesidad/detalle.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/necesidad/:id/editar",{templateUrl:"scripts/necesidad/editar.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/categoria/:categoria",{templateUrl:"scripts/necesidad/categoria.html",reloadOnSearch:!1,controller:"CategoriaCtrl",controllerAs:"CategoriaCtrl"}).when("/perfil",{templateUrl:"scripts/users/config.html",reloadOnSearch:!1,controller:"ConfigCtrl",controllerAs:"ConfigCtrl"}).when("/usuario/:id",{templateUrl:"scripts/users/profile.html",reloadOnSearch:!1,controller:"UserCtrl",controllerAs:"UserCtrl"}).when("/contacto",{templateUrl:"scripts/shared/contacto.html"}).when("/privacidad",{templateUrl:"scripts/shared/privacidad.html"}).when("/admin/usuarios",{template:"<users-list></users-list>"}).when("/admin/usuario/:id",{template:"<user-settings></user-settings>"}).otherwise({redirectTo:"/"})}])}(),function(){"use strict";angular.module("app.admin",["app.admin.users"])}(),function(){"use strict";angular.module("app.admin.users",[]).directive("usersList",function(){return{restrict:"E",templateUrl:"scripts/admin/users.html",controller:"AdminUsersCtrl",controllerAs:"ctrl"}}).controller("AdminUsersCtrl",["User","ngNotify",function(e,r){var t=this;e.all().success(function(e){t.users=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.home",[]).controller("HomeCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad.categoria",[]).controller("CategoriaCtrl",["Necesidad","$routeParams",function(e,r){var t=this;e.categoria(r.categoria).success(function(e){t.necesidades=e.necesidades,t.categoria=e.categoria}).error(function(e){console.error(e)})}])}(),function(){"use strict";angular.module("app.comentario.service",[]).factory("Comentario",["$http",function(e){return{"delete":function(r){return e["delete"]("/api/comentarios/"+r)},util:function(r){return e.patch("/api/comentarios/"+r)},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades/"+r.necesidadId+"/comentarios"})},update:function(r){return e({data:r,method:"PUT",url:"/api/comentarios/"+r.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.detalle",[]).controller("NecesidadDetalleCtrl",["Necesidad","ngNotify","$routeParams","$window","Comentario","$scope",function(e,r,t,n,i,o){var s=this;s.necesidad={},s.Comentario={},t.id&&e.show(t.id).success(function(e){s.necesidad=e}).error(function(e){r.set(e,"error")}),s.save=function(){e.update(s.necesidad).success(function(e){r.set(e,"success")}).error(function(e){r.set(e,"error")})},s.comentar=function(){s.ComentarioForm.necesidadId=s.necesidad.id,i.create(s.ComentarioForm).success(function(e){r.set(e,"success"),s.Comentario.createdAt=new Date,s.necesidad.comentarios.push(s.Comentario),s.Comentario={}}).error(function(e){r.set(e,"error")})},s["delete"]=function(){var t=confirm("Realmente deseas eliminar esta publicaciÃ³n?");t&&e["delete"](s.necesidad.id).success(function(e){r.set(e,"success"),n.location="#/"}).error(function(e){r.set(e,"error")})},s.util=function(e){i.util(e.id).success(function(t){e.util=!0,r.set(t,"success")}).error(function(e){r.set(e,"error")})},o.upload=function(n){console.log("Subiendo archivo");var i=new FormData;n[0]&&(i.append("file",n[0]),e.upload(i,t.id).success(function(e){r.set(e,"success"),console.log(e)}).error(function(e){console.log(e),r.set(e,"error")}))}}])}(),function(){"use strict";angular.module("app.necesidad.item",[]).directive("necesidadItem",function(){return{restrict:"E",templateUrl:"scripts/necesidad/item.html",scope:{necesidad:"="}}})}(),function(){"use strict";angular.module("app.necesidad",["app.necesidad.service","app.necesidad.nueva","app.necesidad.item","app.necesidad.detalle","app.necesidad.categoria","app.comentario.service"]).controller("NecesidadesCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad.service",[]).factory("Necesidad",["$http",function(e){return{load:function(r){return e.get("/api/necesidades")},show:function(r){return e.get("/api/necesidades/"+r)},categoria:function(r){return e.get("/api/categorias/"+r)},"delete":function(r){return e["delete"]("/api/necesidades/"+r)},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades"})},upload:function(r,t){return e.post("/api/necesidades/"+t+"/upload",r,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},update:function(r){return e({data:r,method:"PUT",url:"/api/necesidades/"+r.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.nueva",[]).directive("nuevaNecesidad",["Necesidad","ngNotify","$window",function(e,r,t){return{restrict:"E",templateUrl:"scripts/necesidad/nueva.html",scope:{user:"="},controllerAs:"NuevaNecesidadCtrl",bindToController:!0,controller:"NuevaNecesidadCtrl"}}]).controller("NuevaNecesidadCtrl",["Necesidad","ngNotify","$window",function(e,r,t){var n=this;n.NecesidadForm={},n.create=function(){e.create(n.NecesidadForm).success(function(e){r.set("Necesidad agregada correctamente :)","success"),t.location="#/necesidad/"+e+"/editar"}).error(function(e){r.set(e,"error")})}}])}(),angular.module("app.directives",[]).directive("money",function(){function e(e,t,n,i){function o(e){var r=Math.pow(10,l);return Math.round(e*r)/r}function s(e){return parseFloat(e).toFixed(l)}function a(e){return i.$isEmpty(e)?"":""+e}var c,u=parseFloat(n.min||0),l=parseFloat(n.precision||2);i.$parsers.push(function(e){angular.isUndefined(e)&&(e=""),0===e.indexOf(".")&&(e="0"+e),0===e.indexOf("-")&&(u>=0?(e=null,i.$setViewValue(""),i.$render()):"-"===e&&(e=""));var t=i.$isEmpty(e);return t||r.test(e)?c=""===e?null:t?e:parseFloat(e):(i.$setViewValue(a(c)),i.$render()),i.$setValidity("number",!0),c}),i.$formatters.push(a);var d=function(e){return!i.$isEmpty(e)&&u>e?void i.$setValidity("min",!1):(i.$setValidity("min",!0),e)};if(i.$parsers.push(d),i.$formatters.push(d),n.max){var p=parseFloat(n.max),f=function(e){return!i.$isEmpty(e)&&e>p?void i.$setValidity("max",!1):(i.$setValidity("max",!0),e)};i.$parsers.push(f),i.$formatters.push(f)}l>-1&&(i.$parsers.push(function(e){return e?o(e):e}),i.$formatters.push(function(e){return e?s(e):e})),t.bind("blur",function(){var e=i.$modelValue;e&&(i.$viewValue=s(e),i.$render())})}var r=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;return{restrict:"A",require:"ngModel",link:e}}).directive("numbersOnly",function(){return{restrict:"A",require:"ngModel",link:function(e,r,t,n){n.$parsers.push(function(e){if(void 0===e)return"";var r=e.replace(/[^0-9+.]/g,"");return r!==e&&(n.$setViewValue(r),n.$render()),r})}}}),angular.module("app.filters",[]).filter("dinero",["$filter","$locale",function(e,r){var t=e("currency"),n=r.NUMBER_FORMATS;return function(e,r,i){0===r&&(r=-1);var o=t(e,i),s=o.indexOf(n.DECIMAL_SEP)+1,a="";return s<o.indexOf(n.CURRENCY_SYM)&&(a=" "+n.CURRENCY_SYM),o.substring(0,s+r)+a}}]),function(){"use strict";angular.module("app.main",["app.directives","app.filters"]).controller("MainController",["$rootScope","$scope","User",function(e,r,t){var n=this;t.me().success(function(e){n.user=e}).error(function(e){console.log(e)}),r.userAgent=navigator.userAgent,e.$on("$routeChangeStart",function(){e.loading=!0}),e.$on("$routeChangeSuccess",function(){e.loading=!1}),r.bottomReached=function(){},r.notices=[];for(var i=0;10>i;i++)r.notices.push({icon:"envelope",message:"Notice "+(i+1)});r.deleteNotice=function(e){var t=r.notices.indexOf(e);t>-1&&r.notices.splice(t,1)}}])}(),function(){"use strict";angular.module("app.user.config",[]).controller("ConfigCtrl",["ngNotify","User","$routeParams",function(e,r,t){var n=this;n.user={};var i=t.id;console.log(i),r.me(i).success(function(e){n.user=e}).error(function(r){e.set(r,"error")}),n.save=function(){r.update(n.user).success(function(r){e.set(r,"success")}).error(function(r){e.set(r,"error")})}}])}(),function(){"use strict";angular.module("app.user",["app.user.service","app.user.config"]).controller("UserCtrl",["ngNotify","User","$routeParams",function(e,r,t){var n=this;console.log("Cargando"),r.show(t.id).success(function(e){n.user=e,console.log("no"),console.log(e)}).error(function(r){e.set(r,"error")})}])}(),function(){"use strict";angular.module("app.user.service",[]).factory("User",["$http",function(e){return{me:function(r){return r?e.get("/api/users/"+r):e.get("/api/users/profile")},update:function(r){return e({method:"PUT",data:r,url:"/api/users/profile"})},show:function(r){return e.get("/api/users/"+r)},all:function(){return e.get("api/admin/users")}}}])}();
//# sourceMappingURL=data:application/json;base64,
