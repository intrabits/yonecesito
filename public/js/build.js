!function(){"use strict";angular.module("app",["ngRoute","ngNotify","mobile-angular-ui","angular-loading-bar","mobile-angular-ui.gestures","app.necesidad","app.admin","app.home","app.main","app.user"]).run(["$transform",function(e){window.$transform=e}]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"scripts/home/scroll.html",reloadOnSearch:!1,controller:"HomeCtrl",controllerAs:"HomeCtrl"}).when("/necesidad/:id",{templateUrl:"scripts/necesidad/detalle.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/necesidad/:id/editar",{templateUrl:"scripts/necesidad/editar.html",controller:"NecesidadDetalleCtrl",controllerAs:"DetalleCtrl"}).when("/categoria/:categoria",{templateUrl:"scripts/necesidad/categoria.html",reloadOnSearch:!1,controller:"CategoriaCtrl",controllerAs:"CategoriaCtrl"}).when("/perfil",{templateUrl:"scripts/users/config.html",reloadOnSearch:!1,controller:"ConfigCtrl",controllerAs:"ConfigCtrl"}).when("/usuario/:id",{template:"<user-profile></user-profile>"}).when("/contacto",{templateUrl:"scripts/shared/contacto.html"}).when("/privacidad",{templateUrl:"scripts/shared/privacidad.html"}).when("/admin",{template:"<admin-dashboard></admin-dashboard>"}).when("/admin/usuarios",{template:"<users-list></users-list>"}).when("/admin/necesidades",{template:"<necesidades-list></necesidades-list>"}).when("/admin/comentarios",{template:"<comentarios-list></comentarios-list>"}).otherwise({redirectTo:"/"})}])}(),function(){"use strict";angular.module("app.admin",["app.admin.users","app.admin.necesidades","app.admin.comentarios","app.admin.dashboard","app.admin.service"])}(),function(){"use strict";angular.module("app.admin.service",[]).factory("Admin",["$http",function(e){return{dash:function(){return e.get("/api/admin/dash")},user:function(r){return e.get("/api/admin/users/"+r)},users:function(){return e.get("api/admin/users")},necesidad:function(r){return e.get("/api/admin/necesidades/"+r)},necesidades:function(){return e.get("api/admin/necesidades")}}}])}(),function(){"use strict";angular.module("app.admin.comentarios",[]).directive("comentariosList",function(){return{restrict:"E",templateUrl:"scripts/admin/comentarios.html",controller:"AdminComentariosCtrl",controllerAs:"ctrl"}}).controller("AdminComentariosCtrl",["Comentario","ngNotify","$route",function(e,r,t){var n=this;e.all().success(function(e){n.comentarios=e}).error(function(e){r.set(e,"error")}),n["delete"]=function(n){var i=confirm("¿Realmente deseas borrar este comentario?");i&&e["delete"](n).success(function(e){r.set(e,"success"),t.reload()}).error(function(e){r.set(e,"error")})},n.update=function(n){var i=prompt("Remplaza el texto",n.texto);n.texto=i,e.update(n).success(function(e){r.set(e,"success"),t.reload()}).error(function(e){r.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.admin.dashboard",[]).directive("adminDashboard",function(){return{restrict:"E",templateUrl:"scripts/admin/dashboard.html",controller:"AdminDashCtrl",controllerAs:"ctrl"}}).controller("AdminDashCtrl",["Admin","ngNotify",function(e,r){var t=this;e.dash().success(function(e){t.dash=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.admin.necesidades",[]).directive("necesidadesList",function(){return{restrict:"E",templateUrl:"scripts/admin/necesidades.html",controller:"AdminNecesidadesCtrl",controllerAs:"ctrl"}}).controller("AdminNecesidadesCtrl",["Necesidad","ngNotify","$route",function(e,r,t){var n=this;e.load().success(function(e){n.necesidades=e}).error(function(e){r.set(e,"error")}),n["delete"]=function(n){var i=confirm("¿Realmente deseas borrar esta necesidad?");i&&e["delete"](n).success(function(e){r.set(e,"success"),t.reload()}).error(function(e){r.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.admin.users",[]).directive("usersList",function(){return{restrict:"E",templateUrl:"scripts/admin/users.html",controller:"AdminUsersCtrl",controllerAs:"ctrl"}}).controller("AdminUsersCtrl",["User","ngNotify",function(e,r){var t=this;e.all().success(function(e){t.users=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.home",[]).controller("HomeCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),angular.module("app.directives",[]).directive("money",function(){function e(e,t,n,i){function s(e){var r=Math.pow(10,d);return Math.round(e*r)/r}function o(e){return parseFloat(e).toFixed(d)}function a(e){return i.$isEmpty(e)?"":""+e}var c,u=parseFloat(n.min||0),d=parseFloat(n.precision||2);i.$parsers.push(function(e){angular.isUndefined(e)&&(e=""),0===e.indexOf(".")&&(e="0"+e),0===e.indexOf("-")&&(u>=0?(e=null,i.$setViewValue(""),i.$render()):"-"===e&&(e=""));var t=i.$isEmpty(e);return t||r.test(e)?c=""===e?null:t?e:parseFloat(e):(i.$setViewValue(a(c)),i.$render()),i.$setValidity("number",!0),c}),i.$formatters.push(a);var l=function(e){return!i.$isEmpty(e)&&u>e?void i.$setValidity("min",!1):(i.$setValidity("min",!0),e)};if(i.$parsers.push(l),i.$formatters.push(l),n.max){var p=parseFloat(n.max),f=function(e){return!i.$isEmpty(e)&&e>p?void i.$setValidity("max",!1):(i.$setValidity("max",!0),e)};i.$parsers.push(f),i.$formatters.push(f)}d>-1&&(i.$parsers.push(function(e){return e?s(e):e}),i.$formatters.push(function(e){return e?o(e):e})),t.bind("blur",function(){var e=i.$modelValue;e&&(i.$viewValue=o(e),i.$render())})}var r=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;return{restrict:"A",require:"ngModel",link:e}}).directive("numbersOnly",function(){return{restrict:"A",require:"ngModel",link:function(e,r,t,n){n.$parsers.push(function(e){if(void 0===e)return"";var r=e.replace(/[^0-9+.]/g,"");return r!==e&&(n.$setViewValue(r),n.$render()),r})}}}),angular.module("app.filters",[]).filter("dinero",["$filter","$locale",function(e,r){var t=e("currency"),n=r.NUMBER_FORMATS;return function(e,r,i){0===r&&(r=-1);var s=t(e,i),o=s.indexOf(n.DECIMAL_SEP)+1,a="";return o<s.indexOf(n.CURRENCY_SYM)&&(a=" "+n.CURRENCY_SYM),s.substring(0,o+r)+a}}]),function(){"use strict";angular.module("app.main",["app.directives","app.filters"]).controller("MainController",["$rootScope","$scope","User","ngNotify",function(e,r,t,n){var i=this;t.me().success(function(e){i.user=e}).error(function(e){console.log(e)}),i.palabrasClave=function(){swal({title:"Suscribirte",text:"Escribe palabras separadas por una coma para recibir notificaciones a tu correo:",type:"input",showCancelButton:!0,closeOnConfirm:!1,animation:"slide-from-top",inputPlaceholder:"Ej: gimnasios, estéticas, computación, etc"},function(e){return e?void t.subscribe({words:e}).success(function(e){swal("Suscrito correctamente",e,"success")}).error(function(e){n.set(e,"error")}):!1})},r.userAgent=navigator.userAgent,e.$on("$routeChangeStart",function(){e.loading=!0}),e.$on("$routeChangeSuccess",function(){e.loading=!1}),r.bottomReached=function(){},r.notices=[];for(var s=0;10>s;s++)r.notices.push({icon:"envelope",message:"Notice "+(s+1)});r.deleteNotice=function(e){var t=r.notices.indexOf(e);t>-1&&r.notices.splice(t,1)}}])}(),function(){"use strict";angular.module("app.necesidad.categoria",[]).controller("CategoriaCtrl",["Necesidad","$routeParams",function(e,r){var t=this;e.categoria(r.categoria).success(function(e){t.necesidades=e.necesidades,t.categoria=e.categoria}).error(function(e){console.error(e)})}])}(),function(){"use strict";angular.module("app.necesidad.comentario",[]).directive("comentario",function(){return{restrict:"E",templateUrl:"scripts/necesidad/comentario.html",scope:{comentario:"="}}})}(),function(){"use strict";angular.module("app.comentario.service",[]).factory("Comentario",["$http",function(e){return{"delete":function(r){return e["delete"]("/api/comentarios/"+r)},util:function(r){return e.patch("/api/comentarios/"+r)},all:function(){return e.get("/api/comentarios/")},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades/"+r.necesidadId+"/comentarios"})},update:function(r){return e({data:r,method:"PUT",url:"/api/comentarios/"+r.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.detalle",[]).controller("NecesidadDetalleCtrl",["Necesidad","ngNotify","$routeParams","$window","Comentario","$scope",function(e,r,t,n,i,s){var o=this;o.necesidad={},o.Comentario={},t.id&&e.show(t.id).success(function(e){o.necesidad=e}).error(function(e){r.set(e,"error")}),o.save=function(){e.update(o.necesidad).success(function(e){r.set(e,"success")}).error(function(e){r.set(e,"error")})},o.comentar=function(){o.ComentarioForm.necesidadId=o.necesidad.id,i.create(o.ComentarioForm).success(function(e){r.set(e,"success"),o.Comentario.createdAt=new Date,o.necesidad.comentarios.push(o.Comentario),o.Comentario={}}).error(function(e){r.set(e,"error")})},o["delete"]=function(){var t=confirm("Realmente deseas eliminar esta publicación?");t&&e["delete"](o.necesidad.id).success(function(e){r.set(e,"success"),n.location="#/"}).error(function(e){r.set(e,"error")})},o.util=function(e){i.util(e.id).success(function(t){e.util=!0,r.set(t,"success")}).error(function(e){r.set(e,"error")})},s.upload=function(n){console.log("Subiendo archivo");var i=new FormData;n[0]&&(i.append("file",n[0]),e.upload(i,t.id).success(function(e){r.set(e,"success"),console.log(e)}).error(function(e){console.log(e),r.set(e,"error")}))}}])}(),function(){"use strict";angular.module("app.necesidad.item",[]).directive("necesidadItem",function(){return{restrict:"E",templateUrl:"scripts/necesidad/item.html",scope:{necesidad:"="}}})}(),function(){"use strict";angular.module("app.necesidad",["app.necesidad.service","app.necesidad.nueva","app.necesidad.item","app.necesidad.detalle","app.necesidad.categoria","app.necesidad.comentario","app.comentario.service"]).controller("NecesidadesCtrl",["Necesidad","ngNotify",function(e,r){var t=this;e.load().success(function(e){t.necesidades=e}).error(function(e){r.set(e,"error")})}]).directive("categoria",function(){return{restrict:"E",templateUrl:"scripts/necesidad/cate.html",scope:{id:"@"}}})}(),function(){"use strict";angular.module("app.necesidad.service",[]).factory("Necesidad",["$http",function(e){return{load:function(r){return e.get("/api/necesidades")},show:function(r){return e.get("/api/necesidades/"+r)},categoria:function(r){return e.get("/api/categorias/"+r)},"delete":function(r){return e["delete"]("/api/necesidades/"+r)},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades"})},upload:function(r,t){return e.post("/api/necesidades/"+t+"/upload",r,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},update:function(r){return e({data:r,method:"PUT",url:"/api/necesidades/"+r.id})}}}])}(),function(){"use strict";angular.module("app.necesidad.nueva",[]).directive("nuevaNecesidad",["Necesidad","ngNotify","$window",function(e,r,t){return{restrict:"E",templateUrl:"scripts/necesidad/nueva.html",scope:{user:"="},controllerAs:"NuevaNecesidadCtrl",bindToController:!0,controller:"NuevaNecesidadCtrl"}}]).controller("NuevaNecesidadCtrl",["Necesidad","ngNotify","$window",function(e,r,t){var n=this;n.NecesidadForm={},n.create=function(){e.create(n.NecesidadForm).success(function(e){r.set("Necesidad agregada correctamente :)","success"),t.location="#/necesidad/"+e+"/editar"}).error(function(e){r.set(e,"error")})}}])}(),function(){"use strict";angular.module("app.user.config",[]).controller("ConfigCtrl",["ngNotify","User","$scope",function(e,r,t){var n=this;n.user={},r.me().success(function(e){n.user=e}).error(function(r){e.set(r,"error")}),n.save=function(){r.update(n.user).success(function(r){e.set(r,"success")}).error(function(r){e.set(r,"error")})},t.upload=function(t){console.log("Subiendo archivo");var i=new FormData;t[0]&&(i.append("file",t[0]),r.upload(i).success(function(r){e.set("Imagen guardada correctamente","success"),n.user.picture=r}).error(function(r){console.log(r),e.set(r,"error")}))}}])}(),function(){"use strict";angular.module("app.user",["app.user.service","app.user.profile","app.user.config"]).controller("UserCtrl",["ngNotify","User","$routeParams",function(e,r,t){var n=this;console.log("Cargando"),r.show(t.id).success(function(e){n.user=e,console.log("no"),console.log(e)}).error(function(r){e.set(r,"error")})}])}(),function(){"use strict";angular.module("app.user.service",[]).factory("User",["$http",function(e){return{me:function(){return e.get("/api/users/profile")},update:function(r){return e({method:"PUT",data:r,url:"/api/users/profile"})},upload:function(r){return e.post("/api/users/upload",r,{withCredentials:!0,headers:{"Content-Type":void 0},transformRequest:angular.identity})},subscribe:function(r){return e({method:"POST",data:r,url:"/api/users/subscribe"})},show:function(r){return e.get("/api/users/"+r)},all:function(){return e.get("api/admin/users")}}}])}(),function(){"use strict";angular.module("app.user.profile",[]).directive("userProfile",function(){return{restrict:"E",templateUrl:"scripts/users/profile.html",controller:"UserCtrl",controllerAs:"ctrl"}}).controller("UserCtrl",["User","ngNotify",function(e,r){var t=this;e.all().success(function(e){t.users=e}).error(function(e){r.set(e,"error")})}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFkbWluL2FkbWluLmNvbnRyb2xsZXIuanMiLCJhZG1pbi9hZG1pbi5zZXJ2aWNlLmpzIiwiYWRtaW4vY29tZW50YXJpb3MuZGlyZWN0aXZlLmpzIiwiYWRtaW4vZGFzaGJvYXJkLmRpcmVjdGl2ZS5qcyIsImFkbWluL25lY2VzaWRhZGVzLmRpcmVjdGl2ZS5qcyIsImFkbWluL3VzZXJzLmRpcmVjdGl2ZS5qcyIsImhvbWUvaG9tZS5jb250cm9sbGVyLmpzIiwic2hhcmVkL2RpcmVjdGl2ZXMuanMiLCJzaGFyZWQvZmlsdGVycy5qcyIsInNoYXJlZC9tYWluLmpzIiwibmVjZXNpZGFkL2NhdGVnb3JpYS5jb250cm9sbGVyLmpzIiwibmVjZXNpZGFkL2NvbWVudGFyaW8uZGlyZWN0aXZlLmpzIiwibmVjZXNpZGFkL2NvbWVudGFyaW8uc2VydmljZS5qcyIsIm5lY2VzaWRhZC9kZXRhbGxlLmNvbnRyb2xsZXIuanMiLCJuZWNlc2lkYWQvaXRlbS5kaXJlY3RpdmUuanMiLCJuZWNlc2lkYWQvbmVjZXNpZGFkLmNvbnRyb2xsZXIuanMiLCJuZWNlc2lkYWQvbmVjZXNpZGFkLnNlcnZpY2UuanMiLCJuZWNlc2lkYWQvbnVldmEuY29udHJvbGxlci5qcyIsInVzZXJzL2NvbmZpZy5jb250cm9sbGVyLmpzIiwidXNlcnMvY29udHJvbGxlci5qcyIsInVzZXJzL3NlcnZpY2UuanMiLCJ1c2Vycy91c2VyLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJHRyYW5zZm9ybSIsIndpbmRvdyIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwicmVsb2FkT25TZWFyY2giLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwidGVtcGxhdGUiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmFjdG9yeSIsIiRodHRwIiwiZGFzaCIsImdldCIsInVzZXIiLCJpZCIsInVzZXJzIiwibmVjZXNpZGFkIiwibmVjZXNpZGFkZXMiLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsIkNvbWVudGFyaW8iLCJuZ05vdGlmeSIsIiRyb3V0ZSIsInZtIiwidGhpcyIsImFsbCIsInN1Y2Nlc3MiLCJkYXRhIiwiY29tZW50YXJpb3MiLCJlcnJvciIsImVyciIsInNldCIsInN1cmUiLCJjb25maXJtIiwicmVsb2FkIiwidXBkYXRlIiwiY29tZW50YXJpbyIsInRleHRvIiwicHJvbXB0IiwiQWRtaW4iLCJOZWNlc2lkYWQiLCJsb2FkIiwiVXNlciIsImxpbmsiLCJzY29wZSIsImVsIiwiYXR0cnMiLCJuZ01vZGVsQ3RybCIsInJvdW5kIiwibnVtIiwiZCIsIk1hdGgiLCJwb3ciLCJwcmVjaXNpb24iLCJmb3JtYXRQcmVjaXNpb24iLCJ2YWx1ZSIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiZm9ybWF0Vmlld1ZhbHVlIiwiJGlzRW1wdHkiLCJsYXN0VmFsaWRWYWx1ZSIsIm1pbiIsIiRwYXJzZXJzIiwicHVzaCIsImlzVW5kZWZpbmVkIiwiaW5kZXhPZiIsIiRzZXRWaWV3VmFsdWUiLCIkcmVuZGVyIiwiZW1wdHkiLCJOVU1CRVJfUkVHRVhQIiwidGVzdCIsIiRzZXRWYWxpZGl0eSIsIiRmb3JtYXR0ZXJzIiwibWluVmFsaWRhdG9yIiwibWF4IiwibWF4VmFsaWRhdG9yIiwiYmluZCIsIiRtb2RlbFZhbHVlIiwiJHZpZXdWYWx1ZSIsInJlcXVpcmUiLCJlbGVtZW50IiwibW9kZWxDdHJsIiwiaW5wdXRWYWx1ZSIsInVuZGVmaW5lZCIsInRyYW5zZm9ybWVkSW5wdXQiLCJyZXBsYWNlIiwiZmlsdGVyIiwibG9jYWxlIiwiY3VycmVuY3lGaWx0ZXIiLCJmb3JtYXRzIiwiTlVNQkVSX0ZPUk1BVFMiLCJhbW91bnQiLCJjdXJyZW5jeVN5bWJvbCIsInNlcCIsIkRFQ0lNQUxfU0VQIiwic3ltYm9sIiwiQ1VSUkVOQ1lfU1lNIiwic3Vic3RyaW5nIiwiJHJvb3RTY29wZSIsIiRzY29wZSIsIm1lIiwiY29uc29sZSIsImxvZyIsInBhbGFicmFzQ2xhdmUiLCJzd2FsIiwidGl0bGUiLCJ0ZXh0IiwidHlwZSIsInNob3dDYW5jZWxCdXR0b24iLCJjbG9zZU9uQ29uZmlybSIsImFuaW1hdGlvbiIsImlucHV0UGxhY2Vob2xkZXIiLCJzdWJzY3JpYmUiLCJ3b3JkcyIsInVzZXJBZ2VudCIsIm5hdmlnYXRvciIsIiRvbiIsImxvYWRpbmciLCJib3R0b21SZWFjaGVkIiwibm90aWNlcyIsImoiLCJpY29uIiwibWVzc2FnZSIsImRlbGV0ZU5vdGljZSIsIm5vdGljZSIsImluZGV4Iiwic3BsaWNlIiwiJHJvdXRlUGFyYW1zIiwiY2F0ZWdvcmlhIiwiZGVsZXRlIiwidXRpbCIsInBhdGNoIiwiY3JlYXRlIiwibWV0aG9kIiwidXJsIiwibmVjZXNpZGFkSWQiLCIkd2luZG93Iiwic2hvdyIsInNhdmUiLCJjb21lbnRhciIsIkNvbWVudGFyaW9Gb3JtIiwiY3JlYXRlZEF0IiwiRGF0ZSIsImxvY2F0aW9uIiwidXBsb2FkIiwiZmlsZXMiLCJmZCIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiY2FsbGJhY2siLCJjbGF2ZSIsInBvc3QiLCJ3aXRoQ3JlZGVudGlhbHMiLCJoZWFkZXJzIiwiQ29udGVudC1UeXBlIiwidHJhbnNmb3JtUmVxdWVzdCIsImlkZW50aXR5IiwiYmluZFRvQ29udHJvbGxlciIsIk5lY2VzaWRhZEZvcm0iLCJwaWN0dXJlIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNBLFlBRUFBLFNBQ0FDLE9BQUEsT0FDQSxVQUNBLFdBQ0Esb0JBQ0Esc0JBQ0EsNkJBQ0EsZ0JBQ0EsWUFDQSxXQUNBLFdBQ0EsYUFFQUMsS0FBQSxhQUFBLFNBQUFDLEdBQ0FDLE9BQUFELFdBQUFBLEtBRUFFLFFBQUEsaUJBQUEsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUNBQyxZQUFBLDJCQUNBQyxnQkFBQSxFQUNBQyxXQUFBLFdBQ0FDLGFBQUEsYUFFQUosS0FBQSxrQkFDQUMsWUFBQSxpQ0FDQUUsV0FBQSx1QkFDQUMsYUFBQSxnQkFFQUosS0FB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QUF4RyxHQUFBQyxJQUNBNkUsU0FBQUMsSUFBQSxZQUVBNUQsRUFBQStGLEtBQUFWLEVBQUFqSCxJQUNBWSxRQUFBLFNBQUFDLEdBQ0FKLEVBQUFWLEtBQUFjLEVBQ0EwRSxRQUFBQyxJQUFBLE1BQ0FELFFBQUFDLElBQUEzRSxLQUVBRSxNQUFBLFNBQUFDLEdBQ0FULEVBQUFVLElBQUFELEVBQUEsaUJDbkJBLFdBQ0EsWUFDQXBDLFNBQ0FDLE9BQUEsdUJBRUFjLFFBQUEsUUFBQSxRQUFBLFNBQUFDLEdBRUEsT0FDQTBGLEdBQUEsV0FDQSxNQUFBMUYsR0FBQUUsSUFBQSx1QkFFQXVCLE9BQUEsU0FBQVIsR0FDQSxNQUFBakIsSUFDQTJILE9BQUEsTUFDQTFHLEtBQUFBLEVBQ0EyRyxJQUFBLHdCQUdBVSxPQUFBLFNBQUFFLEdBQ0EsTUFBQXhJLEdBQUE2SSxLQUFBLG9CQUFBTCxHQUNBTSxpQkFBQSxFQUNBQyxTQUFBQyxlQUFBdkUsUUFDQXdFLGlCQUFBakssUUFBQWtLLFlBR0E1QyxVQUFBLFNBQUFyRixHQUNBLE1BQUFqQixJQUNBMkgsT0FBQSxPQUNBMUcsS0FBQUEsRUFDQTJHLElBQUEsMEJBR0FHLEtBQUEsU0FBQTNILEdBQ0EsTUFBQUosR0FBQUUsSUFBQSxjQUFBRSxJQUVBVyxJQUFBLFdBQ0EsTUFBQWYsR0FBQUUsSUFBQSwyQkNwQ0EsV0FDQSxZQUNBbEIsU0FDQUMsT0FBQSx1QkFDQXVCLFVBQUEsY0FBQSxXQUNBLE9BQ0FDLFNBQUEsSUFDQWpCLFlBQUEsNkJBQ0FFLFdBQUEsV0FDQUMsYUFBQSxVQUdBRCxXQUFBLFlBQUEsT0FBQSxXQUFBLFNBQUFzQyxFQUFBckIsR0FFQSxHQUFBRSxHQUFBQyxJQUVBa0IsR0FBQWpCLE1BQ0FDLFFBQUEsU0FBQUMsR0FDQUosRUFBQVIsTUFBQVksSUFFQUUsTUFBQSxTQUFBQyxHQUNBVCxFQUFBVSxJQUFBRCxFQUFBIiwiZmlsZSI6ImJ1aWxkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnLCBbXG4gICAgICAnbmdSb3V0ZScsXG4gICAgICAnbmdOb3RpZnknLFxuICAgICAgJ21vYmlsZS1hbmd1bGFyLXVpJyxcbiAgICAgICdhbmd1bGFyLWxvYWRpbmctYmFyJyxcbiAgICAgICdtb2JpbGUtYW5ndWxhci11aS5nZXN0dXJlcycsXG4gICAgICAnYXBwLm5lY2VzaWRhZCcsXG4gICAgICAnYXBwLmFkbWluJyxcbiAgICAgICdhcHAuaG9tZScsXG4gICAgICAnYXBwLm1haW4nLFxuICAgICAgJ2FwcC51c2VyJ1xuICAgIF0pXG4gICAgLnJ1bihbJyR0cmFuc2Zvcm0nLGZ1bmN0aW9uKCR0cmFuc2Zvcm0pIHtcbiAgICAgIHdpbmRvdy4kdHJhbnNmb3JtID0gJHRyYW5zZm9ybTtcbiAgICB9XSlcbiAgICAuY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgLndoZW4oJy8nLCB7XG4gICAgICAgICAgdGVtcGxhdGVVcmw6ICdzY3JpcHRzL2hvbWUvc2Nyb2xsLmh0bWwnLFxuICAgICAgICAgIHJlbG9hZE9uU2VhcmNoOiBmYWxzZSxcbiAgICAgICAgICBjb250cm9sbGVyOidIb21lQ3RybCcsXG4gICAgICAgICAgY29udHJvbGxlckFzOidIb21lQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9uZWNlc2lkYWQvOmlkJywge1xuICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9uZWNlc2lkYWQvZGV0YWxsZS5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOidOZWNlc2lkYWREZXRhbGxlQ3RybCcsXG4gICAgICAgICAgY29udHJvbGxlckFzOidEZXRhbGxlQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9uZWNlc2lkYWQvOmlkL2VkaXRhcicsIHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvbmVjZXNpZGFkL2VkaXRhci5odG1sJyxcbiAgICAgICAgICBjb250cm9sbGVyOidOZWNlc2lkYWREZXRhbGxlQ3RybCcsXG4gICAgICAgICAgY29udHJvbGxlckFzOidEZXRhbGxlQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9jYXRlZ29yaWEvOmNhdGVnb3JpYScsIHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvbmVjZXNpZGFkL2NhdGVnb3JpYS5odG1sJyxcbiAgICAgICAgICByZWxvYWRPblNlYXJjaDogZmFsc2UsXG4gICAgICAgICAgY29udHJvbGxlcjonQ2F0ZWdvcmlhQ3RybCcsXG4gICAgICAgICAgY29udHJvbGxlckFzOidDYXRlZ29yaWFDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL3BlcmZpbCcsIHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvdXNlcnMvY29uZmlnLmh0bWwnLFxuICAgICAgICAgIHJlbG9hZE9uU2VhcmNoOiBmYWxzZSxcbiAgICAgICAgICBjb250cm9sbGVyOidDb25maWdDdHJsJyxcbiAgICAgICAgICBjb250cm9sbGVyQXM6J0NvbmZpZ0N0cmwnXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvdXN1YXJpby86aWQnLCB7XG4gICAgICAgICAgdGVtcGxhdGU6ICc8dXNlci1wcm9maWxlPjwvdXNlci1wcm9maWxlPidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9jb250YWN0bycsIHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvc2hhcmVkL2NvbnRhY3RvLmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvcHJpdmFjaWRhZCcsIHtcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvc2hhcmVkL3ByaXZhY2lkYWQuaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9hZG1pbicsIHtcbiAgICAgICAgICB0ZW1wbGF0ZTogJzxhZG1pbi1kYXNoYm9hcmQ+PC9hZG1pbi1kYXNoYm9hcmQ+J1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL2FkbWluL3VzdWFyaW9zJywge1xuICAgICAgICAgIHRlbXBsYXRlOiAnPHVzZXJzLWxpc3Q+PC91c2Vycy1saXN0PidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9hZG1pbi9uZWNlc2lkYWRlcycsIHtcbiAgICAgICAgICB0ZW1wbGF0ZTogJzxuZWNlc2lkYWRlcy1saXN0PjwvbmVjZXNpZGFkZXMtbGlzdD4nXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvYWRtaW4vY29tZW50YXJpb3MnLCB7XG4gICAgICAgICAgdGVtcGxhdGU6ICc8Y29tZW50YXJpb3MtbGlzdD48L2NvbWVudGFyaW9zLWxpc3Q+J1xuICAgICAgICB9KVxuICAgICAgICAub3RoZXJ3aXNlKHtcbiAgICAgICAgICByZWRpcmVjdFRvOiAnLydcbiAgICAgICAgfSk7XG4gICAgfV0pO1xuXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLmFkbWluJyxbXG4gICAgICAnYXBwLmFkbWluLnVzZXJzJyxcbiAgICAgICdhcHAuYWRtaW4ubmVjZXNpZGFkZXMnLFxuICAgICAgJ2FwcC5hZG1pbi5jb21lbnRhcmlvcycsXG4gICAgICAnYXBwLmFkbWluLmRhc2hib2FyZCcsXG4gICAgICAnYXBwLmFkbWluLnNlcnZpY2UnXG4gICAgXSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLmFkbWluLnNlcnZpY2UnLCAgW10pXG5cbiAgICAgIC5mYWN0b3J5ICgnQWRtaW4nLCBbJyRodHRwJyxmdW5jdGlvbiAoJGh0dHApIHtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhc2g6ZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9hZG1pbi9kYXNoJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB1c2VyOmZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9hZG1pbi91c2Vycy8nICsgaWQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdXNlcnM6ZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnYXBpL2FkbWluL3VzZXJzJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBuZWNlc2lkYWQ6ZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2FkbWluL25lY2VzaWRhZGVzLycgKyBpZCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBuZWNlc2lkYWRlczpmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCdhcGkvYWRtaW4vbmVjZXNpZGFkZXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XSk7XG5cbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAuYWRtaW4uY29tZW50YXJpb3MnLFtdKVxuICAgICAgLmRpcmVjdGl2ZSgnY29tZW50YXJpb3NMaXN0JyxmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzY3JpcHRzL2FkbWluL2NvbWVudGFyaW9zLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjonQWRtaW5Db21lbnRhcmlvc0N0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOidjdHJsJ1xuICAgICAgICAgIH07XG4gICAgICB9KVxuICAgICAgLmNvbnRyb2xsZXIoJ0FkbWluQ29tZW50YXJpb3NDdHJsJyxbJ0NvbWVudGFyaW8nLCduZ05vdGlmeScsJyRyb3V0ZScsZnVuY3Rpb24gKENvbWVudGFyaW8sbmdOb3RpZnksJHJvdXRlKSB7XG5cbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICBDb21lbnRhcmlvLmFsbCgpXG4gICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHZtLmNvbWVudGFyaW9zID0gZGF0YTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCdlcnJvcicpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHZtLmRlbGV0ZSA9IGZ1bmN0aW9uIG5hbWUoaWQpIHtcblxuICAgICAgICAgIHZhciBzdXJlID0gY29uZmlybSgnwr9SZWFsbWVudGUgZGVzZWFzIGJvcnJhciBlc3RlIGNvbWVudGFyaW8/Jyk7XG5cbiAgICAgICAgICBpZiAoc3VyZSkge1xuICAgICAgICAgICAgQ29tZW50YXJpby5kZWxldGUoaWQpXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGRhdGEsJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAkcm91dGUucmVsb2FkKCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGVyciwnZXJyb3InKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZtLnVwZGF0ZSA9IGZ1bmN0aW9uIChjb21lbnRhcmlvKSB7XG4gICAgICAgICAgdmFyIHRleHRvID0gcHJvbXB0KCdSZW1wbGF6YSBlbCB0ZXh0bycsY29tZW50YXJpby50ZXh0bylcblxuICAgICAgICAgIGNvbWVudGFyaW8udGV4dG8gPSB0ZXh0bztcbiAgICAgICAgICBDb21lbnRhcmlvLnVwZGF0ZShjb21lbnRhcmlvKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGRhdGEsJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgJHJvdXRlLnJlbG9hZCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgfV0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcC5hZG1pbi5kYXNoYm9hcmQnLFtdKVxuICAgICAgLmRpcmVjdGl2ZSgnYWRtaW5EYXNoYm9hcmQnLGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvYWRtaW4vZGFzaGJvYXJkLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjonQWRtaW5EYXNoQ3RybCcsXG4gICAgICAgICAgICBjb250cm9sbGVyQXM6J2N0cmwnXG4gICAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgICAuY29udHJvbGxlcignQWRtaW5EYXNoQ3RybCcsWydBZG1pbicsJ25nTm90aWZ5JyxmdW5jdGlvbiAoQWRtaW4sbmdOb3RpZnkpIHtcblxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIEFkbWluLmRhc2goKVxuICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB2bS5kYXNoID0gZGF0YTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCdlcnJvcicpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLmFkbWluLm5lY2VzaWRhZGVzJyxbXSlcbiAgICAgIC5kaXJlY3RpdmUoJ25lY2VzaWRhZGVzTGlzdCcsZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9hZG1pbi9uZWNlc2lkYWRlcy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6J0FkbWluTmVjZXNpZGFkZXNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczonY3RybCdcbiAgICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5jb250cm9sbGVyKCdBZG1pbk5lY2VzaWRhZGVzQ3RybCcsWydOZWNlc2lkYWQnLCduZ05vdGlmeScsJyRyb3V0ZScsZnVuY3Rpb24gKE5lY2VzaWRhZCxuZ05vdGlmeSwkcm91dGUpIHtcblxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIE5lY2VzaWRhZC5sb2FkKClcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdm0ubmVjZXNpZGFkZXMgPSBkYXRhO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgdm0uZGVsZXRlID0gZnVuY3Rpb24gbmFtZShpZCkge1xuXG4gICAgICAgICAgdmFyIHN1cmUgPSBjb25maXJtKCfCv1JlYWxtZW50ZSBkZXNlYXMgYm9ycmFyIGVzdGEgbmVjZXNpZGFkPycpO1xuXG4gICAgICAgICAgaWYgKHN1cmUpIHtcbiAgICAgICAgICAgIE5lY2VzaWRhZC5kZWxldGUoaWQpXG4gICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGRhdGEsJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAkcm91dGUucmVsb2FkKCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGVyciwnZXJyb3InKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLmFkbWluLnVzZXJzJyxbXSlcbiAgICAgIC5kaXJlY3RpdmUoJ3VzZXJzTGlzdCcsZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9hZG1pbi91c2Vycy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6J0FkbWluVXNlcnNDdHJsJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczonY3RybCdcbiAgICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5jb250cm9sbGVyKCdBZG1pblVzZXJzQ3RybCcsWydVc2VyJywnbmdOb3RpZnknLGZ1bmN0aW9uIChVc2VyLG5nTm90aWZ5KSB7XG5cbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICBVc2VyLmFsbCgpXG4gICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHZtLnVzZXJzID0gZGF0YTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCdlcnJvcicpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLmhvbWUnLFtdKVxuICAgICAgLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJyxbJ05lY2VzaWRhZCcsJ25nTm90aWZ5JyxmdW5jdGlvbiAoTmVjZXNpZGFkLG5nTm90aWZ5KSB7XG5cbiAgICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgICBOZWNlc2lkYWQubG9hZCgpXG4gICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgdm0ubmVjZXNpZGFkZXMgPSBkYXRhO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsICdlcnJvcicpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICB9XSk7XG59KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuYW5ndWxhci5tb2R1bGUoJ2FwcC5kaXJlY3RpdmVzJywgW10pXG4gIC5kaXJlY3RpdmUoJ21vbmV5JywgZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIE5VTUJFUl9SRUdFWFAgPSAvXlxccyooXFwtfFxcKyk/KFxcZCt8KFxcZCooXFwuXFxkKikpKVxccyokLztcblxuICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsLCBhdHRycywgbmdNb2RlbEN0cmwpIHtcbiAgICAgIHZhciBtaW4gPSBwYXJzZUZsb2F0KGF0dHJzLm1pbiB8fCAwKTtcbiAgICAgIHZhciBwcmVjaXNpb24gPSBwYXJzZUZsb2F0KGF0dHJzLnByZWNpc2lvbiB8fCAyKTtcbiAgICAgIHZhciBsYXN0VmFsaWRWYWx1ZTtcblxuICAgICAgZnVuY3Rpb24gcm91bmQobnVtKSB7XG4gICAgICAgIHZhciBkID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bSAqIGQpIC8gZDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZm9ybWF0UHJlY2lzaW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKS50b0ZpeGVkKHByZWNpc2lvbik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZvcm1hdFZpZXdWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmdNb2RlbEN0cmwuJGlzRW1wdHkodmFsdWUpID8gJycgOiAnJyArIHZhbHVlO1xuICAgICAgfVxuXG5cbiAgICAgIG5nTW9kZWxDdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgbGVhZGluZyBkZWNpbWFsIHBvaW50LCBsaWtlIFwiLjVcIlxuICAgICAgICBpZiAodmFsdWUuaW5kZXhPZignLicpID09PSAwKSB7XG4gICAgICAgICAgdmFsdWUgPSAnMCcgKyB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFsbG93IFwiLVwiIGlucHV0cyBvbmx5IHdoZW4gbWluIDwgMFxuICAgICAgICBpZiAodmFsdWUuaW5kZXhPZignLScpID09PSAwKSB7XG4gICAgICAgICAgaWYgKG1pbiA+PSAwKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKCcnKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnLScpIHtcbiAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVtcHR5ID0gbmdNb2RlbEN0cmwuJGlzRW1wdHkodmFsdWUpO1xuICAgICAgICBpZiAoZW1wdHkgfHwgTlVNQkVSX1JFR0VYUC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgIGxhc3RWYWxpZFZhbHVlID0gKHZhbHVlID09PSAnJylcbiAgICAgICAgICA/IG51bGxcbiAgICAgICAgICA6IChlbXB0eSA/IHZhbHVlIDogcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFJlbmRlciB0aGUgbGFzdCB2YWxpZCBpbnB1dCBpbiB0aGUgZmllbGRcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKGZvcm1hdFZpZXdWYWx1ZShsYXN0VmFsaWRWYWx1ZSkpO1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnbnVtYmVyJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBsYXN0VmFsaWRWYWx1ZTtcbiAgICAgIH0pO1xuICAgICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmb3JtYXRWaWV3VmFsdWUpO1xuXG4gICAgICB2YXIgbWluVmFsaWRhdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKCFuZ01vZGVsQ3RybC4kaXNFbXB0eSh2YWx1ZSkgJiYgdmFsdWUgPCBtaW4pIHtcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ21pbicsIGZhbHNlKTtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnbWluJywgdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgbmdNb2RlbEN0cmwuJHBhcnNlcnMucHVzaChtaW5WYWxpZGF0b3IpO1xuICAgICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChtaW5WYWxpZGF0b3IpO1xuXG4gICAgICBpZiAoYXR0cnMubWF4KSB7XG4gICAgICAgIHZhciBtYXggPSBwYXJzZUZsb2F0KGF0dHJzLm1heCk7XG4gICAgICAgIHZhciBtYXhWYWxpZGF0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghbmdNb2RlbEN0cmwuJGlzRW1wdHkodmFsdWUpICYmIHZhbHVlID4gbWF4KSB7XG4gICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ21heCcsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnbWF4JywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIG5nTW9kZWxDdHJsLiRwYXJzZXJzLnB1c2gobWF4VmFsaWRhdG9yKTtcbiAgICAgICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChtYXhWYWxpZGF0b3IpO1xuICAgICAgfVxuXG4gICAgICAvLyBSb3VuZCBvZmZcbiAgICAgIGlmIChwcmVjaXNpb24gPiAtMSkge1xuICAgICAgICBuZ01vZGVsQ3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA/IHJvdW5kKHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUgPyBmb3JtYXRQcmVjaXNpb24odmFsdWUpIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBlbC5iaW5kKCdibHVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA9IGZvcm1hdFByZWNpc2lvbih2YWx1ZSk7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgIGxpbms6IGxpbmtcbiAgICB9O1xuICB9KS5kaXJlY3RpdmUoJ251bWJlcnNPbmx5JywgZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbW9kZWxDdHJsKSB7XG4gICAgICAgIG1vZGVsQ3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgLy8gdGhpcyBuZXh0IGlmIGlzIG5lY2Vzc2FyeSBmb3Igd2hlbiB1c2luZyBuZy1yZXF1aXJlZCBvbiB5b3VyIGlucHV0LlxuICAgICAgICAgIC8vIEluIHN1Y2ggY2FzZXMsIHdoZW4gYSBsZXR0ZXIgaXMgdHlwZWQgZmlyc3QsIHRoaXMgcGFyc2VyIHdpbGwgYmUgY2FsbGVkXG4gICAgICAgICAgLy8gYWdhaW4sIGFuZCB0aGUgMm5kIHRpbWUsIHRoZSB2YWx1ZSB3aWxsIGJlIHVuZGVmaW5lZFxuICAgICAgICAgIGlmIChpbnB1dFZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRJbnB1dCA9IGlucHV0VmFsdWUucmVwbGFjZSgvW14wLTkrLl0vZywgJycpO1xuICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZElucHV0IT09aW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUodHJhbnNmb3JtZWRJbnB1dCk7XG4gICAgICAgICAgICBtb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZElucHV0O1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAuZmlsdGVycycsW10pXG4gIC5maWx0ZXIoJ2RpbmVybycsXG4gIFsgJyRmaWx0ZXInLCAnJGxvY2FsZScsIGZ1bmN0aW9uKGZpbHRlciwgbG9jYWxlKSB7XG4gICAgdmFyIGN1cnJlbmN5RmlsdGVyID0gZmlsdGVyKCdjdXJyZW5jeScpO1xuICAgIHZhciBmb3JtYXRzID0gbG9jYWxlLk5VTUJFUl9GT1JNQVRTO1xuICAgIHJldHVybiBmdW5jdGlvbihhbW91bnQsIG51bSwgY3VycmVuY3lTeW1ib2wpIHtcbiAgICAgIGlmIChudW09PT0wKSBudW0gPSAtMTtcbiAgICAgIHZhciB2YWx1ZSA9IGN1cnJlbmN5RmlsdGVyKGFtb3VudCwgY3VycmVuY3lTeW1ib2wpO1xuICAgICAgdmFyIHNlcCA9IHZhbHVlLmluZGV4T2YoZm9ybWF0cy5ERUNJTUFMX1NFUCkrMTtcbiAgICAgIHZhciBzeW1ib2wgPSAnJztcbiAgICAgIGlmIChzZXA8dmFsdWUuaW5kZXhPZihmb3JtYXRzLkNVUlJFTkNZX1NZTSkpIHN5bWJvbCA9ICcgJytmb3JtYXRzLkNVUlJFTkNZX1NZTTtcbiAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgc2VwK251bSkrc3ltYm9sO1xuICAgIH07XG4gIH0gXSk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gICAgYW5ndWxhclxuICAgICAgLm1vZHVsZSgnYXBwLm1haW4nLCBbXG4gICAgICAnYXBwLmRpcmVjdGl2ZXMnLFxuICAgICAgJ2FwcC5maWx0ZXJzJ1xuICAgIF0pXG4gICAgLmNvbnRyb2xsZXIoJ01haW5Db250cm9sbGVyJyxbJyRyb290U2NvcGUnLCckc2NvcGUnLCdVc2VyJywnbmdOb3RpZnknLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkc2NvcGUsIFVzZXIsIG5nTm90aWZ5KXtcblxuICAgICAgdmFyIHZtID0gdGhpcztcblxuICAgICAgVXNlci5tZSgpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgdm0udXNlciA9IGRhdGE7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG5cblxuICAgICAgdm0ucGFsYWJyYXNDbGF2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dhbCh7XG4gICAgICAgICAgdGl0bGU6IFwiU3VzY3JpYmlydGVcIixcbiAgICAgICAgICB0ZXh0OiBcIkVzY3JpYmUgcGFsYWJyYXMgc2VwYXJhZGFzIHBvciB1bmEgY29tYSBwYXJhIHJlY2liaXIgbm90aWZpY2FjaW9uZXMgYSB0dSBjb3JyZW86XCIsXG4gICAgICAgICAgdHlwZTogXCJpbnB1dFwiLFxuICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlLFxuICAgICAgICAgIGFuaW1hdGlvbjogXCJzbGlkZS1mcm9tLXRvcFwiLFxuICAgICAgICAgIGlucHV0UGxhY2Vob2xkZXI6IFwiRWo6IGdpbW5hc2lvcywgZXN0w6l0aWNhcywgY29tcHV0YWNpw7NuLCBldGNcIlxuICAgICAgICB9LCBmdW5jdGlvbihpbnB1dFZhbHVlKXtcbiAgICAgICAgICBpZiAoaW5wdXRWYWx1ZSkge1xuXG4gICAgICAgICAgICBVc2VyLnN1YnNjcmliZSh7XG4gICAgICAgICAgICAgIHdvcmRzOmlucHV0VmFsdWVcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBzd2FsKCdTdXNjcml0byBjb3JyZWN0YW1lbnRlJywgZGF0YSwgXCJzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG5cbiAgICAgIC8vIFVzZXIgYWdlbnQgZGlzcGxheWVkIGluIGhvbWUgcGFnZVxuICAgICAgJHNjb3BlLnVzZXJBZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgICAgIC8vIE5lZWRlZCBmb3IgdGhlIGxvYWRpbmcgc2NyZWVuXG4gICAgICAkcm9vdFNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbigpe1xuICAgICAgICAkcm9vdFNjb3BlLmxvYWRpbmcgPSB0cnVlO1xuICAgICAgfSk7XG5cbiAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oKXtcbiAgICAgICAgJHJvb3RTY29wZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICB9KTtcblxuXG5cbiAgICAgICRzY29wZS5ib3R0b21SZWFjaGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8qIGdsb2JhbCBhbGVydDogZmFsc2U7ICovXG4gICAgICAgIC8vIGFsZXJ0KCdDb25ncmF0cyB5b3Ugc2Nyb2xsZWQgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdCEnKTtcbiAgICAgIH07XG5cblxuICAgICAgLy9cbiAgICAgIC8vICdEcmFnJyBzY3JlZW5cbiAgICAgIC8vXG4gICAgICAkc2NvcGUubm90aWNlcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgJHNjb3BlLm5vdGljZXMucHVzaCh7aWNvbjogJ2VudmVsb3BlJywgbWVzc2FnZTogJ05vdGljZSAnICsgKGogKyAxKSB9KTtcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLmRlbGV0ZU5vdGljZSA9IGZ1bmN0aW9uKG5vdGljZSkge1xuICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUubm90aWNlcy5pbmRleE9mKG5vdGljZSk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgJHNjb3BlLm5vdGljZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLm5lY2VzaWRhZC5jYXRlZ29yaWEnLFtdKVxuICAgICAgLmNvbnRyb2xsZXIoJ0NhdGVnb3JpYUN0cmwnLFsnTmVjZXNpZGFkJywnJHJvdXRlUGFyYW1zJyxmdW5jdGlvbiAoTmVjZXNpZGFkLCRyb3V0ZVBhcmFtcykge1xuXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cblxuXG4gICAgICAgIE5lY2VzaWRhZC5jYXRlZ29yaWEoJHJvdXRlUGFyYW1zLmNhdGVnb3JpYSlcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdm0ubmVjZXNpZGFkZXMgPSBkYXRhLm5lY2VzaWRhZGVzO1xuICAgICAgICAgICAgdm0uY2F0ZWdvcmlhID0gZGF0YS5jYXRlZ29yaWE7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICB9XSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLm5lY2VzaWRhZC5jb21lbnRhcmlvJyxbXSlcbiAgICAgIC5kaXJlY3RpdmUoJ2NvbWVudGFyaW8nLGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3NjcmlwdHMvbmVjZXNpZGFkL2NvbWVudGFyaW8uaHRtbCcsXG4gICAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgICBjb21lbnRhcmlvOiAnPSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfTtcbiAgICAgIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FwcC5jb21lbnRhcmlvLnNlcnZpY2UnLFtdKVxuICAgICAgLmZhY3RvcnkoJ0NvbWVudGFyaW8nLFsnJGh0dHAnLGZ1bmN0aW9uICgkaHR0cCkge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGVsZXRlOmZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9jb21lbnRhcmlvcy8nICsgaWQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdXRpbDpmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wYXRjaCgnL2FwaS9jb21lbnRhcmlvcy8nICsgaWQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYWxsOmZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY29tZW50YXJpb3MvJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjcmVhdGU6ZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICAgIGRhdGEgICAgOiAgZGF0YSxcbiAgICAgICAgICAgICAgbWV0aG9kICA6ICdQT1NUJyxcbiAgICAgICAgICAgICAgdXJsICAgICA6ICcvYXBpL25lY2VzaWRhZGVzLycgKyBkYXRhLm5lY2VzaWRhZElkICsgJy9jb21lbnRhcmlvcydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdXBkYXRlOmZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgICBkYXRhICAgIDogIGRhdGEsXG4gICAgICAgICAgICAgIG1ldGhvZCAgOiAnUFVUJyxcbiAgICAgICAgICAgICAgdXJsICAgICA6ICcvYXBpL2NvbWVudGFyaW9zLycgKyBkYXRhLmlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgfV0pXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLm5lY2VzaWRhZC5kZXRhbGxlJyxbXSlcbiAgICAgIC5jb250cm9sbGVyKCdOZWNlc2lkYWREZXRhbGxlQ3RybCcsWydOZWNlc2lkYWQnLCduZ05vdGlmeScsJyRyb3V0ZVBhcmFtcycsJyR3aW5kb3cnLCdDb21lbnRhcmlvJywnJHNjb3BlJyxmdW5jdGlvbiAoTmVjZXNpZGFkLG5nTm90aWZ5LCRyb3V0ZVBhcmFtcywkd2luZG93LENvbWVudGFyaW8sJHNjb3BlKSB7XG5cbiAgICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgICAgdm0ubmVjZXNpZGFkID0ge307XG4gICAgICAgIHZtLkNvbWVudGFyaW8gPSB7fTtcblxuICAgICAgICBpZiAoJHJvdXRlUGFyYW1zLmlkKSB7XG4gICAgICAgICAgTmVjZXNpZGFkLnNob3coJHJvdXRlUGFyYW1zLmlkKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgdm0ubmVjZXNpZGFkID0gZGF0YTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCdlcnJvcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2bS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIE5lY2VzaWRhZC51cGRhdGUodm0ubmVjZXNpZGFkKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGRhdGEsJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCdlcnJvcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdm0uY29tZW50YXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICB2bS5Db21lbnRhcmlvRm9ybS5uZWNlc2lkYWRJZCA9IHZtLm5lY2VzaWRhZC5pZDtcblxuICAgICAgICAgIENvbWVudGFyaW8uY3JlYXRlKHZtLkNvbWVudGFyaW9Gb3JtKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGRhdGEsJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgdm0uQ29tZW50YXJpby5jcmVhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICB2bS5uZWNlc2lkYWQuY29tZW50YXJpb3MucHVzaCh2bS5Db21lbnRhcmlvKTtcbiAgICAgICAgICAgICAgdm0uQ29tZW50YXJpbyA9IHt9O1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2bS5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIHN1cmUgPSBjb25maXJtKCdSZWFsbWVudGUgZGVzZWFzIGVsaW1pbmFyIGVzdGEgcHVibGljYWNpw7NuPycpO1xuICAgICAgICAgIGlmIChzdXJlKSB7XG4gICAgICAgICAgICBOZWNlc2lkYWQuZGVsZXRlKHZtLm5lY2VzaWRhZC5pZClcbiAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBuZ05vdGlmeS5zZXQoZGF0YSwnc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgICR3aW5kb3cubG9jYXRpb24gPSAnIy8nO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2bS51dGlsID0gZnVuY3Rpb24gKGNvbWVudGFyaW8pIHtcblxuICAgICAgICAgIENvbWVudGFyaW8udXRpbChjb21lbnRhcmlvLmlkKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgY29tZW50YXJpby51dGlsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGRhdGEsJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCdlcnJvcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnVwbG9hZCA9IGZ1bmN0aW9uKGZpbGVzKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1N1YmllbmRvIGFyY2hpdm8nKTtcbiAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTsgICAgICAgICAgXG5cbiAgICAgICAgICBpZiAoZmlsZXNbMF0pIHtcbiAgICAgICAgICAgIGZkLmFwcGVuZChcImZpbGVcIiwgZmlsZXNbMF0pO1xuXG4gICAgICAgICAgICBOZWNlc2lkYWQudXBsb2FkKGZkLCRyb3V0ZVBhcmFtcy5pZClcbiAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBuZ05vdGlmeS5zZXQoZGF0YSwnc3VjY2VzcycpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KGVyciwnZXJyb3InKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG5cbiAgICAgIH1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAubmVjZXNpZGFkLml0ZW0nLFtdKVxuICAgICAgLmRpcmVjdGl2ZSgnbmVjZXNpZGFkSXRlbScsZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9uZWNlc2lkYWQvaXRlbS5odG1sJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgIG5lY2VzaWRhZDogJz0nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICB9KTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAubmVjZXNpZGFkJyxbXG4gICAgICAnYXBwLm5lY2VzaWRhZC5zZXJ2aWNlJyxcbiAgICAgICdhcHAubmVjZXNpZGFkLm51ZXZhJyxcbiAgICAgICdhcHAubmVjZXNpZGFkLml0ZW0nLFxuICAgICAgJ2FwcC5uZWNlc2lkYWQuZGV0YWxsZScsXG4gICAgICAnYXBwLm5lY2VzaWRhZC5jYXRlZ29yaWEnLFxuICAgICAgJ2FwcC5uZWNlc2lkYWQuY29tZW50YXJpbycsXG4gICAgICAnYXBwLmNvbWVudGFyaW8uc2VydmljZSdcbiAgICBdKVxuICAgICAgLmNvbnRyb2xsZXIoJ05lY2VzaWRhZGVzQ3RybCcsWydOZWNlc2lkYWQnLCduZ05vdGlmeScsZnVuY3Rpb24gKE5lY2VzaWRhZCxuZ05vdGlmeSkge1xuXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICAgICAgTmVjZXNpZGFkLmxvYWQoKVxuICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIHZtLm5lY2VzaWRhZGVzID0gZGF0YTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCAnZXJyb3InKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgfV0pXG4gICAgICAuZGlyZWN0aXZlKCdjYXRlZ29yaWEnLGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy9uZWNlc2lkYWQvY2F0ZS5odG1sJyxcbiAgICAgICAgICAgIHNjb3BlOntcbiAgICAgICAgICAgICAgaWQ6J0AnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLm5lY2VzaWRhZC5zZXJ2aWNlJyxbXSlcbiAgICAgIC5mYWN0b3J5KCdOZWNlc2lkYWQnLFsnJGh0dHAnLGZ1bmN0aW9uICgkaHR0cCkge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbG9hZDpmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvbmVjZXNpZGFkZXMnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNob3c6ZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL25lY2VzaWRhZGVzLycgKyBpZCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjYXRlZ29yaWE6ZnVuY3Rpb24gKGNsYXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2NhdGVnb3JpYXMvJyArIGNsYXZlKTtcbiAgICAgICAgICB9LCAgICAgICAgICBcbiAgICAgICAgICBkZWxldGU6ZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL25lY2VzaWRhZGVzLycgKyBpZCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjcmVhdGU6ZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICAgIGRhdGEgICAgOiAgZGF0YSxcbiAgICAgICAgICAgICAgbWV0aG9kICA6ICdQT1NUJyxcbiAgICAgICAgICAgICAgdXJsICAgICA6ICcvYXBpL25lY2VzaWRhZGVzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB1cGxvYWQ6ZnVuY3Rpb24gKGZkLGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9uZWNlc2lkYWRlcy8nICsgaWQgKyAnL3VwbG9hZCcsIGZkLCB7XG4gICAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiB1bmRlZmluZWQgfSxcbiAgICAgICAgICAgICAgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB1cGRhdGU6ZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cCh7XG4gICAgICAgICAgICAgIGRhdGEgICAgOiAgZGF0YSxcbiAgICAgICAgICAgICAgbWV0aG9kICA6ICdQVVQnLFxuICAgICAgICAgICAgICB1cmwgICAgIDogJy9hcGkvbmVjZXNpZGFkZXMvJyArIGRhdGEuaWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9XSlcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAubmVjZXNpZGFkLm51ZXZhJyxbXSlcbiAgICAgIC5kaXJlY3RpdmUoJ251ZXZhTmVjZXNpZGFkJyxbJ05lY2VzaWRhZCcsJ25nTm90aWZ5JywnJHdpbmRvdycsZnVuY3Rpb24gKE5lY2VzaWRhZCxuZ05vdGlmeSwkd2luZG93KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzY3JpcHRzL25lY2VzaWRhZC9udWV2YS5odG1sJyxcbiAgICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICAgIHVzZXI6ICc9J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBczogXCJOdWV2YU5lY2VzaWRhZEN0cmxcIixcbiAgICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTnVldmFOZWNlc2lkYWRDdHJsJ1xuICAgICAgICAgIH07XG4gICAgICB9XSlcbiAgICAgIC5jb250cm9sbGVyKCdOdWV2YU5lY2VzaWRhZEN0cmwnLFsnTmVjZXNpZGFkJywnbmdOb3RpZnknLCckd2luZG93JyxmdW5jdGlvbiAoTmVjZXNpZGFkLG5nTm90aWZ5LCR3aW5kb3dcbiAgICAgICkge1xuXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLk5lY2VzaWRhZEZvcm0gPSB7fTtcblxuICAgICAgICB2bS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgTmVjZXNpZGFkLmNyZWF0ZSh2bS5OZWNlc2lkYWRGb3JtKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgbmdOb3RpZnkuc2V0KCdOZWNlc2lkYWQgYWdyZWdhZGEgY29ycmVjdGFtZW50ZSA6KScsJ3N1Y2Nlc3MnKTsgJHdpbmRvdy5sb2NhdGlvbiA9ICcjL25lY2VzaWRhZC8nICsgZGF0YSArICcvZWRpdGFyJztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCdlcnJvcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgIH1dKTtcbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAudXNlci5jb25maWcnLCBbXSlcbiAgICAuY29udHJvbGxlcignQ29uZmlnQ3RybCcsWyduZ05vdGlmeScsJ1VzZXInLCckc2NvcGUnLGZ1bmN0aW9uKG5nTm90aWZ5LFVzZXIsJHNjb3BlKXtcblxuICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgIHZtLnVzZXIgPSB7fTtcblxuICAgICAgVXNlci5tZSgpXG4gICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uICAoZGF0YSkge1xuICAgICAgICAgIHZtLnVzZXIgPSBkYXRhO1xuICAgICAgICB9KVxuICAgICAgICAuZXJyb3IoZnVuY3Rpb24gIChlcnIpIHtcbiAgICAgICAgICBuZ05vdGlmeS5zZXQoZXJyLCdlcnJvcicpO1xuICAgICAgICB9KTtcblxuICAgICAgdm0uc2F2ZSA9IGZ1bmN0aW9uICAoKSB7XG4gICAgICAgIFVzZXIudXBkYXRlKHZtLnVzZXIpXG4gICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIG5nTm90aWZ5LnNldChkYXRhLCdzdWNjZXNzJyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gIChlcnIpIHtcbiAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUudXBsb2FkID0gZnVuY3Rpb24oZmlsZXMpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1N1YmllbmRvIGFyY2hpdm8nKTtcbiAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIC8vVGFrZSB0aGUgZmlyc3Qgc2VsZWN0ZWQgZmlsZVxuXG4gICAgICAgIGlmIChmaWxlc1swXSkge1xuICAgICAgICAgIGZkLmFwcGVuZChcImZpbGVcIiwgZmlsZXNbMF0pO1xuXG4gICAgICAgICAgVXNlci51cGxvYWQoZmQpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICBuZ05vdGlmeS5zZXQoJ0ltYWdlbiBndWFyZGFkYSBjb3JyZWN0YW1lbnRlJywnc3VjY2VzcycpO1xuICAgICAgICAgICAgICB2bS51c2VyLnBpY3R1cmUgPSBkYXRhO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuXG4gICAgfV0pO1xuXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyLm1vZHVsZSgnYXBwLnVzZXInLCBbXG4gICAgJ2FwcC51c2VyLnNlcnZpY2UnLFxuICAgICdhcHAudXNlci5wcm9maWxlJyxcbiAgICAnYXBwLnVzZXIuY29uZmlnJyAvLyBlZGl0YXIgcGVyZmlsIGRlbCB1c3VhcmlvIHkgc3UgY29uZmlndXJhY2nDs25cbiAgXSlcbiAgICAuY29udHJvbGxlcignVXNlckN0cmwnLFsnbmdOb3RpZnknLCdVc2VyJywnJHJvdXRlUGFyYW1zJyxmdW5jdGlvbihuZ05vdGlmeSxVc2VyLCRyb3V0ZVBhcmFtcyl7XG5cbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICBjb25zb2xlLmxvZygnQ2FyZ2FuZG8nKTtcblxuICAgICAgVXNlci5zaG93KCRyb3V0ZVBhcmFtcy5pZClcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gIChkYXRhKSB7XG4gICAgICAgICAgICB2bS51c2VyID0gZGF0YTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubycpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbiAgKGVycikge1xuICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgIH0pO1xuXG4gICAgfV0pO1xuXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLnVzZXIuc2VydmljZScsICBbXSlcblxuICAgICAgLmZhY3RvcnkgKCdVc2VyJywgWyckaHR0cCcsZnVuY3Rpb24gKCRodHRwKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtZTpmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzL3Byb2ZpbGUnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVwZGF0ZTpmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwKHtcbiAgICAgICAgICAgICAgbWV0aG9kOidQVVQnLFxuICAgICAgICAgICAgICBkYXRhOmRhdGEsXG4gICAgICAgICAgICAgIHVybDonL2FwaS91c2Vycy9wcm9maWxlJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB1cGxvYWQ6ZnVuY3Rpb24gKGZkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2Vycy91cGxvYWQnLCBmZCwge1xuICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWUsXG4gICAgICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkIH0sXG4gICAgICAgICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGFuZ3VsYXIuaWRlbnRpdHlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc3Vic2NyaWJlOmZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAoe1xuICAgICAgICAgICAgICBtZXRob2Q6J1BPU1QnLFxuICAgICAgICAgICAgICBkYXRhOmRhdGEsXG4gICAgICAgICAgICAgIHVybDonL2FwaS91c2Vycy9zdWJzY3JpYmUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNob3c6ZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzLycgKyBpZCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhbGw6ZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnYXBpL2FkbWluL3VzZXJzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfV0pO1xuXG59KSgpO1xuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICBhbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwLnVzZXIucHJvZmlsZScsW10pXG4gICAgICAuZGlyZWN0aXZlKCd1c2VyUHJvZmlsZScsZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2NyaXB0cy91c2Vycy9wcm9maWxlLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjonVXNlckN0cmwnLFxuICAgICAgICAgICAgY29udHJvbGxlckFzOidjdHJsJ1xuICAgICAgICAgIH07XG4gICAgICB9KVxuICAgICAgLmNvbnRyb2xsZXIoJ1VzZXJDdHJsJyxbJ1VzZXInLCduZ05vdGlmeScsZnVuY3Rpb24gKFVzZXIsbmdOb3RpZnkpIHtcblxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuXG4gICAgICAgIFVzZXIuYWxsKClcbiAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdm0udXNlcnMgPSBkYXRhO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmVycm9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIG5nTm90aWZ5LnNldChlcnIsJ2Vycm9yJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIH1dKTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
