!function(){"use strict";angular.module("app",["ngRoute","mobile-angular-ui","app.main","app.home","ngNotify","app.necesidad","mobile-angular-ui.gestures"]).run(["$transform",function(e){window.$transform=e}]).config(["$routeProvider",function(e){e.when("/",{templateUrl:"scripts/home/home.html",reloadOnSearch:!1}).when("/",{templateUrl:"scripts/home/scroll.html",reloadOnSearch:!1,controller:"HomeCtrl",controllerAs:"HomeCtrl"}).otherwise({redirectTo:"/"})}])}(),function(){"use strict";angular.module("app.home",[]).controller("HomeCtrl",["Necesidad","ngNotify",function(e,r){var n=this;e.load().success(function(e){n.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad",["app.necesidad.service","app.necesidad.nueva"]).controller("NecesidadesCtrl",["Necesidad","ngNotify",function(e,r){var n=this;e.load().success(function(e){n.necesidades=e}).error(function(e){r.set(e,"error")})}])}(),function(){"use strict";angular.module("app.necesidad.service",[]).factory("Necesidad",["$http",function(e){return{load:function(r){return e.get("/api/necesidades")},show:function(r){return e.get("/api/necesidades/"+r)},categoria:function(r){return e.get("/api/categorias/"+r)},create:function(r){return e({data:r,method:"POST",url:"/api/necesidades"})}}}])}(),function(){"use strict";angular.module("app.necesidad.nueva",[]).controller("NuevaNecesidadCtrl",["Necesidad","ngNotify",function(e,r){var n=this;n.NecesidadForm={},n.create=function(){e.create(n.NecesidadForm).success(function(e){r.set(e,"success"),n.NecesidadForm=null,n.NecesidadForm={}}).error(function(e){r.set(e,"error")})}}])}(),angular.module("app.directives",[]).directive("money",function(){function e(e,n,t,i){function o(e){var r=Math.pow(10,l);return Math.round(e*r)/r}function a(e){return parseFloat(e).toFixed(l)}function s(e){return i.$isEmpty(e)?"":""+e}var u,c=parseFloat(t.min||0),l=parseFloat(t.precision||2);i.$parsers.push(function(e){angular.isUndefined(e)&&(e=""),0===e.indexOf(".")&&(e="0"+e),0===e.indexOf("-")&&(c>=0?(e=null,i.$setViewValue(""),i.$render()):"-"===e&&(e=""));var n=i.$isEmpty(e);return n||r.test(e)?u=""===e?null:n?e:parseFloat(e):(i.$setViewValue(s(u)),i.$render()),i.$setValidity("number",!0),u}),i.$formatters.push(s);var d=function(e){return!i.$isEmpty(e)&&c>e?void i.$setValidity("min",!1):(i.$setValidity("min",!0),e)};if(i.$parsers.push(d),i.$formatters.push(d),t.max){var p=parseFloat(t.max),f=function(e){return!i.$isEmpty(e)&&e>p?void i.$setValidity("max",!1):(i.$setValidity("max",!0),e)};i.$parsers.push(f),i.$formatters.push(f)}l>-1&&(i.$parsers.push(function(e){return e?o(e):e}),i.$formatters.push(function(e){return e?a(e):e})),n.bind("blur",function(){var e=i.$modelValue;e&&(i.$viewValue=a(e),i.$render())})}var r=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;return{restrict:"A",require:"ngModel",link:e}}).directive("numbersOnly",function(){return{restrict:"A",require:"ngModel",link:function(e,r,n,t){t.$parsers.push(function(e){if(void 0===e)return"";var r=e.replace(/[^0-9+.]/g,"");return r!==e&&(t.$setViewValue(r),t.$render()),r})}}}),angular.module("app.filters",[]).filter("dinero",["$filter","$locale",function(e,r){var n=e("currency"),t=r.NUMBER_FORMATS;return function(e,r,i){0===r&&(r=-1);var o=n(e,i),a=o.indexOf(t.DECIMAL_SEP)+1,s="";return a<o.indexOf(t.CURRENCY_SYM)&&(s=" "+t.CURRENCY_SYM),o.substring(0,a+r)+s}}]),function(){"use strict";angular.module("app.main",["app.directives","app.filters"]).controller("MainController",["$rootScope","$scope",function(e,r){r.userAgent=navigator.userAgent,e.$on("$routeChangeStart",function(){e.loading=!0}),e.$on("$routeChangeSuccess",function(){e.loading=!1}),r.bottomReached=function(){alert("Congrats you scrolled to the end of the list!")},r.notices=[];for(var n=0;10>n;n++)r.notices.push({icon:"envelope",message:"Notice "+(n+1)});r.deleteNotice=function(e){var n=r.notices.indexOf(e);n>-1&&r.notices.splice(n,1)}}])}(),function(){"use strict";angular.module("app.users",["app.users.service"]).controller("UserCtrl",["$scope","User",function(e,r){r.one("profile").get().then(function(r){e.FormUser=r})["catch"](function(e){alert(e.data)}),e.updateProfile=function(){e.FormUser.put()["catch"](function(e){alert(e.data)})}}])}(),function(){"use strict";angular.module("app.users.service",[]).factory("User",["$http",function(e){return{all:Restangular.all("api/users"),one:function(e){return Restangular.one("api/users",e)}}}])}();
//# sourceMappingURL=data:application/json;base64,
